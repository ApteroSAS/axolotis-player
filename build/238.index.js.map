{"version":3,"file":"238.index.js","mappings":"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","sources":["webpack://axolotis-player/./src/lib/modules/ammo/AmmoLib.ts","webpack://axolotis-player/./src/lib/modules/controller/physicPlayerControl/PlayerPhysics.ts","webpack://axolotis-player/./src/lib/modules/controller/physicPlayerControl/PlayerControls.ts"],"sourcesContent":["import * as _Ammo from \"ammo.js/builds/ammo.wasm\";\nimport * as THREE from \"three\";\nimport { ConvexHull } from \"three/examples/jsm/math/ConvexHull\";\nvar config = {};\n\nlet Ammo: any = null;\nlet rayOrigin: any = null;\nlet rayDest: any = null;\nlet closestRayResultCallback: any = null;\n\nconst CollisionFlags = { CF_NO_CONTACT_RESPONSE: 4 };\nconst CollisionFilterGroups = {\n  DefaultFilter: 1,\n  StaticFilter: 2,\n  KinematicFilter: 4,\n  DebrisFilter: 8,\n  SensorTrigger: 16,\n  CharacterFilter: 32,\n  AllFilter: -1, //all bits sets: DefaultFilter | StaticFilter | KinematicFilter | DebrisFilter | SensorTrigger\n};\n\nfunction createConvexHullShape(object) {\n  const geometry = createConvexGeom(object);\n  let coords = geometry.attributes.position.array;\n  let tempVec = new Ammo.btVector3(0, 0, 0);\n  let shape = new Ammo.btConvexHullShape();\n  for (let i = 0, il = coords.length; i < il; i += 3) {\n    tempVec.setValue(coords[i], coords[i + 1], coords[i + 2]);\n    let lastOne = i >= il - 3;\n    shape.addPoint(tempVec, lastOne);\n  }\n  return shape;\n}\n\nfunction createConvexGeom(object) {\n  // Compute the 3D convex hull.\n  let hull = new ConvexHull().setFromObject(object);\n  let faces = hull.faces;\n  let vertices: any[] = [];\n  let normals: any[] = [];\n\n  for (var i = 0; i < faces.length; i++) {\n    var face = faces[i];\n    var edge = face.edge;\n    do {\n      let point: any = edge.head().point;\n      vertices.push(point.x, point.y, point.z);\n      normals.push(face.normal.x, face.normal.y, face.normal.z);\n      edge = edge.next;\n    } while (edge !== face.edge);\n  }\n\n  const geom = new THREE.BufferGeometry();\n  geom.setAttribute(\"position\", new THREE.Float32BufferAttribute(vertices, 3));\n  geom.setAttribute(\"normal\", new THREE.Float32BufferAttribute(normals, 3));\n\n  return geom;\n}\n\nclass AmmoHelper {\n  static init(callback = () => {}) {\n    _Ammo(config).then((ammo) => {\n      Ammo = ammo;\n      callback();\n    });\n  }\n\n  static CreateTrigger(shape, position, rotation) {\n    const transform = new Ammo.btTransform();\n    transform.setIdentity();\n    position &&\n      transform.setOrigin(\n        new Ammo.btVector3(position.x, position.y, position.z)\n      );\n    rotation &&\n      transform.setRotation(\n        new Ammo.btQuaternion(rotation.x, rotation.y, rotation.z, rotation.w)\n      );\n\n    const ghostObj = new Ammo.btPairCachingGhostObject();\n    ghostObj.setCollisionShape(shape);\n    ghostObj.setCollisionFlags(CollisionFlags.CF_NO_CONTACT_RESPONSE);\n    ghostObj.setWorldTransform(transform);\n\n    return ghostObj;\n  }\n\n  static IsTriggerOverlapping(ghostObj, rigidBody) {\n    for (let i = 0; i < ghostObj.getNumOverlappingObjects(); i++) {\n      const body = Ammo.castObject(\n        ghostObj.getOverlappingObject(i),\n        Ammo.btRigidBody\n      );\n      if (body == rigidBody) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  static CastRay(\n    world,\n    origin,\n    dest,\n    result: any = {},\n    collisionFilterMask = CollisionFilterGroups.AllFilter\n  ) {\n    if (!rayOrigin) {\n      rayOrigin = new Ammo.btVector3();\n      rayDest = new Ammo.btVector3();\n      closestRayResultCallback = new Ammo.ClosestRayResultCallback(\n        rayOrigin,\n        rayDest\n      );\n    }\n\n    // Reset closestRayResultCallback to reuse it\n    const rayCallBack = Ammo.castObject(\n      closestRayResultCallback,\n      Ammo.RayResultCallback\n    );\n    rayCallBack.set_m_closestHitFraction(1);\n    rayCallBack.set_m_collisionObject(null);\n\n    rayCallBack.m_collisionFilterMask = collisionFilterMask;\n\n    // Set closestRayResultCallback origin and dest\n    rayOrigin.setValue(origin.x, origin.y, origin.z);\n    rayDest.setValue(dest.x, dest.y, dest.z);\n    closestRayResultCallback\n      .get_m_rayFromWorld()\n      .setValue(origin.x, origin.y, origin.z);\n    closestRayResultCallback\n      .get_m_rayToWorld()\n      .setValue(dest.x, dest.y, dest.z);\n\n    // Perform ray test\n    world.rayTest(rayOrigin, rayDest, closestRayResultCallback);\n\n    if (closestRayResultCallback.hasHit()) {\n      if (result.intersectionPoint) {\n        const point = closestRayResultCallback.get_m_hitPointWorld();\n        result.intersectionPoint.set(point.x(), point.y(), point.z());\n      }\n\n      if (result.intersectionNormal) {\n        const normal = closestRayResultCallback.get_m_hitNormalWorld();\n        result.intersectionNormal.set(normal.x(), normal.y(), normal.z());\n      }\n\n      result.collisionObject = rayCallBack.get_m_collisionObject();\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport {\n  AmmoHelper,\n  Ammo,\n  createConvexHullShape,\n  CollisionFlags,\n  CollisionFilterGroups,\n};\n","import { Ammo } from \"@root/lib/modules/ammo/AmmoLib\";\nimport { AmmoPhysics } from \"@root/lib/modules/ammo/AmmoPhysics\";\n\nconst CF_KINEMATIC_OBJECT = 2;\nconst DISABLE_DEACTIVATION = 4;\n\nexport default class PlayerPhysics {\n  private world: any;\n  private body: any;\n  private canJump: boolean;\n  private up: Ammo.btVector3;\n  private tempVec: Ammo.btVector3;\n  constructor(ammoPhysics: AmmoPhysics) {\n    this.world = ammoPhysics.physicsWorld;\n    this.body = null;\n    this.canJump = false;\n    this.up = new Ammo.btVector3(0, 1, 0);\n    this.tempVec = new Ammo.btVector3();\n  }\n\n  Initialize(x: number, y: number, z: number) {\n    const height = 1.3,\n      radius = 0.3,\n      mass = 5;\n\n    const transform = new Ammo.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new Ammo.btVector3(x, y, z));\n    const motionState = new Ammo.btDefaultMotionState(transform);\n\n    const shape = new Ammo.btCapsuleShape(radius, height);\n    const localInertia = new Ammo.btVector3(0, 0, 0);\n    const bodyInfo = new Ammo.btRigidBodyConstructionInfo(\n      mass,\n      motionState,\n      shape,\n      localInertia\n    );\n    this.body = new Ammo.btRigidBody(bodyInfo);\n    this.body.setFriction(0);\n\n    //this.body.setCollisionFlags(this.body.getCollisionFlags() | CF_KINEMATIC_OBJECT);\n    this.body.setActivationState(DISABLE_DEACTIVATION);\n\n    this.world.addRigidBody(this.body);\n  }\n\n  QueryJump() {\n    const dispatcher = this.world.getDispatcher();\n    const numManifolds = dispatcher.getNumManifolds();\n\n    for (let i = 0; i < numManifolds; i++) {\n      const contactManifold = dispatcher.getManifoldByIndexInternal(i);\n      const rb0 = Ammo.castObject(contactManifold.getBody0(), Ammo.btRigidBody);\n      const rb1 = Ammo.castObject(contactManifold.getBody1(), Ammo.btRigidBody);\n\n      if (rb0 != this.body && rb1 != this.body) {\n        continue;\n      }\n\n      const numContacts = contactManifold.getNumContacts();\n\n      for (let j = 0; j < numContacts; j++) {\n        const contactPoint = contactManifold.getContactPoint(j);\n\n        const normal = contactPoint.get_m_normalWorldOnB();\n        this.tempVec.setValue(normal.x(), normal.y(), normal.z());\n\n        if (rb1 == this.body) {\n          this.tempVec.setValue(\n            -this.tempVec.x(),\n            -this.tempVec.y(),\n            -this.tempVec.z()\n          );\n        }\n\n        const angle = this.tempVec.dot(this.up);\n        this.canJump = angle > 0.5;\n\n        if (this.canJump) {\n          return;\n        }\n      }\n    }\n  }\n\n  PhysicsUpdate() {\n    this.QueryJump();\n  }\n}\n","import * as THREE from \"three\";\nimport { Euler, Quaternion, Vector3 } from \"three\";\nimport { ThreeLib } from \"@root/lib/modules/three/ThreeLib\";\nimport { AmmoPhysics } from \"@root/lib/modules/ammo/AmmoPhysics\";\nimport { Input } from \"@root/lib/modules/controller/physicPlayerControl/Input\";\nimport PlayerPhysics from \"@root/lib/modules/controller/physicPlayerControl/PlayerPhysics\";\nimport { FrameLoop } from \"@root/lib/modules/FrameLoop\";\nimport Component from \"@root/lib/modules/core/ecs/Component\";\nimport { WebpackLazyModule } from \"@root/lib/modules/core/loader/WebpackLoader\";\nimport { ComponentFactory } from \"@root/lib/modules/core/ecs/ComponentFactory\";\nimport { WorldEntity } from \"@root/lib/modules/core/ecs/WorldEntity\";\nimport { ServiceEntity } from \"@root/lib/modules/core/service/ServiceEntity\";\n\nexport class Factory\n  implements WebpackLazyModule, ComponentFactory<PlayerControls>\n{\n  async create(world: WorldEntity, config: any): Promise<PlayerControls> {\n    let services = world.getFirstComponentByType<ServiceEntity>(\n      ServiceEntity.name\n    );\n    let three = await services.getService<ThreeLib>(\n      \"@root/lib/modules/three/ThreeLib\"\n    );\n    let ammo = await services.getService<AmmoPhysics>(\n      \"@root/lib/modules/core/ammo/AmmoPhysics\"\n    );\n    let input = await services.getService<Input>(\n      \"@root/lib/modules/controller/Input\"\n    );\n    let frameLoop = await services.getService<FrameLoop>(\n      \"@root/lib/modules/FrameLoop\"\n    );\n    //let position = new THREE.Vector3(2.14, 1.48, -1.36);\n    //let position = new THREE.Vector3(0,5,0);\n    let position = new THREE.Vector3(\n      (config.position && config.position.x) || 0,\n      (config.position && config.position.y) || 0,\n      (config.position && config.position.z) || 0\n    );\n    let rotation = new THREE.Quaternion().setFromAxisAngle(\n      new THREE.Vector3(0, 1, 0),\n      -Math.PI * 0.5\n    );\n    let playerPhysics = new PlayerPhysics(await ammo);\n    playerPhysics.Initialize(position.x, position.y, position.z);\n    let playerControls = new PlayerControls(\n      playerPhysics,\n      position,\n      rotation,\n      await three,\n      await input\n    );\n    playerControls.Initialize();\n    (await frameLoop).addLoop(PlayerControls.name, (delta) => {\n      playerControls.Update(delta);\n      playerPhysics.PhysicsUpdate();\n    });\n    return playerControls;\n  }\n}\n\nexport default class PlayerControls implements Component {\n  private camera: any;\n  private timeZeroToMax: number;\n  private decceleration: number;\n  private speed: Vector3;\n  private maxSpeed: number;\n  private physicsComponent: any;\n  private mouseSpeed: number;\n  private acceleration: number;\n  private isLocked: boolean;\n  private angles: Euler;\n  private pitch: Quaternion;\n  private jumpVelocity: number;\n  private yaw: Quaternion;\n  private tempVec: Vector3;\n  private moveDir: Vector3;\n  private yOffset: number;\n  private xAxis: Vector3;\n  private yAxis: Vector3;\n  private physicsBody: any;\n  private transform: Ammo.btTransform | any;\n  private zeroVec: Ammo.btVector3 | any;\n  private position: Vector3;\n  private rotation: Quaternion;\n\n  getType(): string {\n    return PlayerControls.name;\n  }\n\n  constructor(\n    physicsComponent,\n    position,\n    rotation,\n    three: ThreeLib,\n    private input: Input\n  ) {\n    this.physicsComponent = physicsComponent;\n    this.position = position;\n    this.rotation = rotation;\n\n    this.camera = three.camera;\n\n    this.timeZeroToMax = 0.08;\n\n    this.maxSpeed = 7.0;\n    this.speed = new THREE.Vector3();\n    this.acceleration = this.maxSpeed / this.timeZeroToMax;\n    this.decceleration = -7.0;\n\n    this.mouseSpeed = 0.002;\n    this.isLocked = false;\n\n    this.angles = new THREE.Euler();\n    this.pitch = new THREE.Quaternion();\n    this.yaw = new THREE.Quaternion();\n\n    this.jumpVelocity = 5;\n    this.yOffset = 0.5;\n    this.tempVec = new THREE.Vector3();\n    this.moveDir = new THREE.Vector3();\n    this.xAxis = new THREE.Vector3(1.0, 0.0, 0.0);\n    this.yAxis = new THREE.Vector3(0.0, 1.0, 0.0);\n  }\n\n  Initialize() {\n    this.physicsBody = this.physicsComponent.body;\n    this.transform = new Ammo.btTransform();\n    this.zeroVec = new Ammo.btVector3(0.0, 0.0, 0.0);\n    this.angles.setFromQuaternion(this.rotation);\n    this.UpdateRotation();\n\n    this.input.AddMouseMoveListner(this.OnMouseMove);\n\n    document.addEventListener(\"pointerlockchange\", this.OnPointerlockChange);\n\n    this.input.AddClickListner(() => {\n      if (!this.isLocked) {\n        document.body.requestPointerLock();\n      }\n    });\n  }\n\n  OnPointerlockChange = () => {\n    if (document.pointerLockElement) {\n      this.isLocked = true;\n      return;\n    }\n\n    this.isLocked = false;\n  };\n\n  OnMouseMove = (event) => {\n    if (!this.isLocked) {\n      return;\n    }\n\n    const { movementX, movementY } = event;\n\n    this.angles.y -= movementX * this.mouseSpeed;\n    this.angles.x -= movementY * this.mouseSpeed;\n\n    this.angles.x = Math.max(\n      -Math.PI / 2,\n      Math.min(Math.PI / 2, this.angles.x)\n    );\n\n    this.UpdateRotation();\n  };\n\n  UpdateRotation() {\n    this.pitch.setFromAxisAngle(this.xAxis, this.angles.x);\n    this.yaw.setFromAxisAngle(this.yAxis, this.angles.y);\n\n    this.rotation.multiplyQuaternions(this.yaw, this.pitch).normalize();\n\n    this.camera.quaternion.copy(this.rotation);\n  }\n\n  Accelarate = (direction, t) => {\n    const accel = this.tempVec\n      .copy(direction)\n      .multiplyScalar(this.acceleration * t);\n    this.speed.add(accel);\n    this.speed.clampLength(0.0, this.maxSpeed);\n  };\n\n  Deccelerate = (t) => {\n    const frameDeccel = this.tempVec\n      .copy(this.speed)\n      .multiplyScalar(this.decceleration * t);\n    this.speed.add(frameDeccel);\n  };\n\n  Update(t) {\n    t = t * 0.001;\n    const forwardFactor =\n      this.input.GetKeyDown(\"KeyS\") - this.input.GetKeyDown(\"KeyW\");\n    const rightFactor =\n      this.input.GetKeyDown(\"KeyD\") - this.input.GetKeyDown(\"KeyA\");\n    const direction = this.moveDir\n      .set(rightFactor, 0.0, forwardFactor)\n      .normalize();\n\n    const velocity = this.physicsBody.getLinearVelocity();\n\n    if (this.input.GetKeyDown(\"Space\") && this.physicsComponent.canJump) {\n      velocity.setY(this.jumpVelocity);\n      this.physicsComponent.canJump = false;\n    }\n\n    this.Deccelerate(t);\n    this.Accelarate(direction, t);\n\n    const moveVector = this.tempVec.copy(this.speed);\n    moveVector.applyQuaternion(this.yaw);\n\n    velocity.setX(moveVector.x);\n    velocity.setZ(moveVector.z);\n\n    this.physicsBody.setLinearVelocity(velocity);\n    this.physicsBody.setAngularVelocity(this.zeroVec);\n\n    const ms = this.physicsBody.getMotionState();\n    if (ms) {\n      ms.getWorldTransform(this.transform);\n      const p = this.transform.getOrigin();\n      this.camera.position.set(p.x(), p.y() + this.yOffset, p.z());\n      this.position.copy(this.camera.position);\n    }\n  }\n}\n"],"names":["config","Ammo","rayOrigin","rayDest","closestRayResultCallback","CollisionFlags","CollisionFilterGroups","createConvexHullShape","object","coords","faces","ConvexHull","setFromObject","vertices","normals","i","length","face","edge","point","head","push","x","y","z","normal","next","geom","THREE","setAttribute","createConvexGeom","attributes","position","array","tempVec","btVector3","shape","btConvexHullShape","il","setValue","lastOne","addPoint","AmmoHelper","callback","_Ammo","then","ammo","rotation","transform","btTransform","setIdentity","setOrigin","setRotation","btQuaternion","w","ghostObj","btPairCachingGhostObject","setCollisionShape","setCollisionFlags","setWorldTransform","rigidBody","getNumOverlappingObjects","castObject","getOverlappingObject","btRigidBody","world","origin","dest","result","collisionFilterMask","ClosestRayResultCallback","rayCallBack","RayResultCallback","set_m_closestHitFraction","set_m_collisionObject","m_collisionFilterMask","get_m_rayFromWorld","get_m_rayToWorld","rayTest","hasHit","intersectionPoint","get_m_hitPointWorld","set","intersectionNormal","get_m_hitNormalWorld","collisionObject","get_m_collisionObject","PlayerPhysics","constructor","ammoPhysics","this","physicsWorld","body","canJump","up","Initialize","motionState","localInertia","bodyInfo","setFriction","setActivationState","addRigidBody","QueryJump","dispatcher","getDispatcher","numManifolds","getNumManifolds","contactManifold","getManifoldByIndexInternal","rb0","getBody0","rb1","getBody1","numContacts","getNumContacts","j","getContactPoint","get_m_normalWorldOnB","angle","dot","PhysicsUpdate","Factory","services","getFirstComponentByType","ServiceEntity","three","getService","input","frameLoop","setFromAxisAngle","Math","PI","playerPhysics","playerControls","PlayerControls","addLoop","name","delta","Update","getType","physicsComponent","document","pointerLockElement","isLocked","event","movementX","movementY","angles","mouseSpeed","max","min","UpdateRotation","direction","t","accel","copy","multiplyScalar","acceleration","speed","add","clampLength","maxSpeed","frameDeccel","decceleration","camera","timeZeroToMax","pitch","yaw","jumpVelocity","yOffset","moveDir","xAxis","yAxis","physicsBody","zeroVec","setFromQuaternion","AddMouseMoveListner","OnMouseMove","addEventListener","OnPointerlockChange","AddClickListner","requestPointerLock","multiplyQuaternions","normalize","quaternion","forwardFactor","GetKeyDown","rightFactor","velocity","getLinearVelocity","setY","Deccelerate","Accelarate","moveVector","applyQuaternion","setX","setZ","setLinearVelocity","setAngularVelocity","ms","getMotionState","getWorldTransform","p","getOrigin"],"sourceRoot":""}