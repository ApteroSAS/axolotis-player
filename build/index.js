/*!
 * 
 *   @aptero/axolotis-player v2.0.0
 *   https://github.com/ApteroSAS/axolotis-player
 *
 *   Copyright (c) Aptero (https://github.com/ApteroSAS/axolotis-player) and project contributors.
 *
 *   This source code is licensed under the MIT license found in the
 *   LICENSE file in the root directory of this source tree.
 *
 */
!function webpackUniversalModuleDefinition(Q,B){"object"==typeof exports&&"object"==typeof module?module.exports=B():"function"==typeof define&&define.amd?define("axolotis-player",[],B):"object"==typeof exports?exports["axolotis-player"]=B():Q["axolotis-player"]=B()}(this,(function(){return function(){"use strict";var __webpack_modules__={660:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "BUILD_VERSION": function() { return /* reexport */ BUILD_VERSION; },\n  "CODE_LOADER_MODULE_NAME": function() { return /* reexport */ CODE_LOADER_MODULE_NAME; },\n  "Entity": function() { return /* reexport */ Entity; },\n  "GLOBAL_LOCAL_MODULE": function() { return /* reexport */ GLOBAL_LOCAL_MODULE; },\n  "GLOBAL_WORLDS_ENTITY": function() { return /* reexport */ GLOBAL_WORLDS_ENTITY; },\n  "InitialComponentLoader": function() { return /* reexport */ InitialComponentLoader; },\n  "LazyEntity": function() { return /* reexport */ LazyEntity; },\n  "LazyServices": function() { return /* reexport */ LazyServices; },\n  "Services": function() { return /* reexport */ Services; },\n  "WorldEntity": function() { return /* reexport */ WorldEntity; },\n  "createWorld": function() { return /* reexport */ createWorld; },\n  "createWorldSync": function() { return /* reexport */ createWorldSync; },\n  "getGlobalStorage": function() { return /* reexport */ getGlobalStorage; },\n  "getGlobalStorageValue": function() { return /* reexport */ getGlobalStorageValue; },\n  "getGlobalWorld": function() { return /* reexport */ getGlobalWorld; },\n  "getService": function() { return /* reexport */ getService; },\n  "getServiceSync": function() { return /* reexport */ getServiceSync; },\n  "initHtml": function() { return /* reexport */ initHtml; },\n  "initHtmlFromUrl": function() { return /* reexport */ initHtmlFromUrl; },\n  "instantiateLocalAsyncModule": function() { return /* reexport */ instantiateLocalAsyncModule; },\n  "registerItem": function() { return /* reexport */ registerItem; },\n  "registerLocalModule": function() { return /* reexport */ registerLocalModule; },\n  "setGlobalStorageValue": function() { return /* reexport */ setGlobalStorageValue; }\n});\n\n;// CONCATENATED MODULE: ./src/lib/modules/core/ecs/Entity.ts\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass Entity {\n  constructor() {\n    _defineProperty(this, "components", []);\n  }\n\n  addComponent(component) {\n    if (component.init) {\n      component.init();\n    }\n\n    this.components.push(component);\n    return component;\n  }\n\n  removeAllComponents() {\n    this.components.forEach(comp => {\n      this.removeComponent(comp);\n    });\n  }\n\n  removeComponent(component) {\n    if (component.destroy) {\n      component.destroy();\n    }\n\n    this.components = this.components.filter(comp => {\n      return comp != component;\n    });\n    return component;\n  }\n\n  addComponents(components) {\n    components.forEach(comp => {\n      this.addComponent(comp);\n    });\n  }\n\n  getComponents() {\n    return this.components;\n  }\n\n  getComponentByType(type) {\n    let ret = [];\n    this.components.forEach(comp => {\n      if (comp.getType() === type) {\n        ret.push(comp);\n      }\n    });\n    return ret;\n  }\n\n  getComponentByTypeStartsWith(type) {\n    let ret = [];\n    this.components.forEach(comp => {\n      if (comp.getType().startsWith(type)) {\n        ret.push(comp);\n      }\n    });\n    return ret;\n  }\n\n  getFirstComponentByTypeStartsWith(type) {\n    return this.getComponentByTypeStartsWith(type)[0];\n  }\n\n  getFirstComponentByType(type) {\n    return this.getComponentByType(type)[0];\n  }\n\n  getType() {\n    return Entity.name;\n  }\n\n}\n/* harmony default export */ var ecs_Entity = (Entity);\n;// CONCATENATED MODULE: ./src/lib/modules/core/ecs/WorldEntity.ts\n\nclass WorldEntity extends ecs_Entity {\n  constructor() {\n    super();\n  }\n\n  getType() {\n    return WorldEntity.name;\n  }\n\n}\n;// CONCATENATED MODULE: ./src/lib/modules/core/loader/Global.ts\nvar axolotis = null;\nconst GLOBAL_WORLDS_ENTITY = "worlds";\nconst GLOBAL_LOCAL_MODULE = "localModules";\nfunction getGlobalStorage() {\n  //not axolotis in window => create it\n  if (typeof window !== "undefined") {\n    if (!window.axolotis) {\n      window.axolotis = {};\n    }\n  } //axolotis var not initialized with window\n\n\n  if (!axolotis && typeof window !== "undefined") {\n    axolotis = window.axolotis;\n  }\n\n  if (!axolotis) {\n    axolotis = {};\n  }\n\n  return axolotis;\n}\nfunction setGlobalStorageValue(key, value) {\n  let globalStorage = getGlobalStorage();\n  globalStorage[key] = value;\n}\nfunction getGlobalStorageValue(key) {\n  let auto = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let globalStorage = getGlobalStorage();\n\n  if (!globalStorage[key] && auto) {\n    globalStorage[key] = {};\n  }\n\n  return globalStorage[key];\n}\n;// CONCATENATED MODULE: ./src/lib/modules/core/loader/LocalLoader.ts\n\n\n\nfunction registerLocalModule(name, module, moduleStorage) {\n  if (!moduleStorage) {\n    moduleStorage = getGlobalStorageValue(GLOBAL_LOCAL_MODULE); //GG name\n  }\n\n  if (moduleStorage[name]) {\n    throw new Error("Module already defined");\n  }\n\n  moduleStorage[name] = module;\n}\n\nfunction getClassName(module) {\n  if (module.classname) {\n    //LongModule Case\n    return module.classname;\n  } else if (module.default && module.default.name) {\n    //ShortModule case\n    return module.default.name;\n  } else {\n    console.error(module);\n    throw new Error("Malformed module");\n  }\n}\n\nasync function instantiateLocalAsyncModule(fqcn, localModules, world, config) {\n  const localModule = await localModules[fqcn]();\n  let module = localModule.module;\n\n  if (!module) {\n    module = localModule; //SortModule case definition\n  }\n\n  for (const key in module) {\n    const sub = module[key];\n\n    if (sub.prototype && sub.prototype.constructor.name === getClassName(localModule)) {\n      let DependencyComponentList = [];\n\n      if (sub.dependencies) {\n        for (let i = 0; i < sub.dependencies.length; i++) {\n          const dep = sub.dependencies[i];\n          let services = world.getFirstComponentByType(Services.name);\n          let service = await services.getService(dep);\n          DependencyComponentList.push(service);\n        }\n      }\n\n      if (config != undefined) {\n        return new sub(...DependencyComponentList, config);\n      } else {\n        return new sub(...DependencyComponentList);\n      }\n    }\n  }\n\n  throw new Error("invalid submodule " + fqcn + " - " + getClassName(localModule));\n}\n;// CONCATENATED MODULE: ./src/lib/modules/core/loader/JsLoader.ts\n\nasync function instantiateAsyncModule(moduleName, moduleStorage, world, config) {\n  let module = null;\n\n  if (moduleStorage && moduleStorage[moduleName]) {\n    module = await instantiateLocalAsyncModule(moduleName, moduleStorage, world, config);\n  } else if (moduleName.startsWith("http")) {\n    //TODO remote module "https://"\n    throw new Error("remote modules not implemented yet");\n  } else {\n    console.log("local module installed:", moduleStorage);\n    throw new Error("unknown module - please register it - " + moduleName);\n  }\n\n  return module;\n}\n;// CONCATENATED MODULE: ./src/lib/modules/core/loader/CodeLoader.ts\nfunction load(modules, loadedCallBack) {\n  let ret = [];\n  let nbLoaded = 0;\n\n  for (const promiseCb of modules) {\n    const promise = promiseCb(); //trigger the load\n\n    ret.push(promise);\n    promise.then(() => {\n      nbLoaded++;\n      loadedCallBack(nbLoaded, modules.length);\n    });\n  }\n\n  return Promise.all(ret);\n}\n;// CONCATENATED MODULE: ./src/lib/modules/core/loader/InitialComponentLoader.ts\nfunction InitialComponentLoader_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nconst CODE_LOADER_MODULE_NAME = "@aptero/axolotis-player/core/loader/InitialComponentLoader";\nclass InitialComponentLoader {\n  constructor() {\n    InitialComponentLoader_defineProperty(this, "initialLoading", void 0);\n\n    InitialComponentLoader_defineProperty(this, "initialLoadingResolver", void 0);\n\n    InitialComponentLoader_defineProperty(this, "moduleStorage", void 0);\n\n    this.initialLoading = new Promise(resolve => {\n      this.initialLoadingResolver = resolve;\n    });\n  }\n\n  getType() {\n    return InitialComponentLoader.name;\n  }\n\n  getModuleStorage() {\n    return this.moduleStorage;\n  }\n\n  async awaitInitialLoading() {\n    await this.initialLoading;\n  }\n\n  async startLoading(world, scene, loadedCallBack, moduleStorage) {\n    this.moduleStorage = moduleStorage;\n\n    if (scene.version !== "2.0") {\n      throw new Error("unsupported");\n    }\n\n    let promises = [];\n\n    for (const entity of scene.entities) {\n      for (const componentDef of entity.components) {\n        let config = componentDef.config;\n        promises.push(() => new Promise(async (resolve, reject) => {\n          let module = await instantiateAsyncModule(componentDef.module, moduleStorage, world, config || {}); //module.createComponent(world, config || {});\n\n          let component = module.getType ? module : await module.createComponent(world, config || {});\n\n          if (!component.getType) {\n            throw new Error("Not a component : " + componentDef.module + " " + component.constructor.name);\n          }\n\n          world.addComponent(component); //TODO world default but should ad to an entity\n\n          resolve(module);\n        }));\n      }\n    }\n\n    let promise = load(promises, loadedCallBack);\n    promise.then(value => {\n      if (this.initialLoadingResolver !== undefined) {\n        this.initialLoadingResolver(value);\n      }\n    });\n    promise.catch(reason => {\n      console.error(reason);\n    });\n    return promise;\n  }\n\n}\n;// CONCATENATED MODULE: ./src/lib/modules/core/loader/service/LazyServices.ts\nfunction LazyServices_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nclass LazyServices {\n  constructor(world) {\n    this.world = world;\n\n    LazyServices_defineProperty(this, "serviceAsync", {});\n\n    LazyServices_defineProperty(this, "service", {});\n  }\n\n  getWorld() {\n    return this.world;\n  }\n\n  setService(moduleName, service) {\n    let replace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (!replace && (this.serviceAsync[moduleName] || this.service[moduleName])) {\n      throw new Error("Service already exist (use replace to force)");\n    }\n\n    this.serviceAsync[moduleName] = Promise.resolve(service);\n    this.service[moduleName] = service;\n\n    if (service.init) {\n      service.init(); //service init\n    }\n  }\n\n  async getService(moduleName) {\n    if (this.serviceAsync[moduleName]) {\n      //service already downloading add this request to queue;\n      const service = await this.serviceAsync[moduleName];\n\n      if (!service) {\n        throw new Error("error");\n      }\n\n      return service;\n    }\n\n    if (!this.serviceAsync[moduleName]) {\n      let modulesList = (await this.serviceAsync[CODE_LOADER_MODULE_NAME]).getModuleStorage();\n      let modulePromise = instantiateAsyncModule(moduleName, modulesList, this.world);\n      this.serviceAsync[moduleName] = new Promise(async resolve => {\n        let module = await modulePromise;\n        let service = module.getType ? module : await module.createService(this);\n        this.service[moduleName] = service; //module resolved\n\n        if (service.init) {\n          service.init(); //service init\n        }\n\n        resolve(service);\n      });\n    }\n\n    return await this.serviceAsync[moduleName];\n  }\n\n}\n;// CONCATENATED MODULE: ./src/lib/modules/core/loader/service/Services.ts\n\nclass Services extends LazyServices {\n  getType() {\n    return Services.name;\n  }\n\n  getServiceSync(moduleName) {\n    if (this.service[moduleName]) {\n      return this.service[moduleName];\n    } else {\n      throw new Error("service not found : " + moduleName);\n    }\n  }\n\n}\n;// CONCATENATED MODULE: ./src/lib/modules/core/loader/BasicInit.ts\n\n\n\n\nfunction createWorldSync() {\n  let initialScene = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    version: "2.0",\n    entities: []\n  };\n  let loadedCallBack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n  let finished = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};\n  let moduleStorage = arguments.length > 3 ? arguments[3] : undefined;\n  let world = arguments.length > 4 ? arguments[4] : undefined;\n\n  if (!world) {\n    world = new WorldEntity();\n  }\n\n  if (!getGlobalStorageValue(GLOBAL_WORLDS_ENTITY, false)) {\n    setGlobalStorageValue(GLOBAL_WORLDS_ENTITY, [world]);\n  } else {\n    getGlobalStorageValue(GLOBAL_WORLDS_ENTITY).push(world);\n  }\n\n  if (!moduleStorage) {\n    moduleStorage = getGlobalStorageValue(GLOBAL_LOCAL_MODULE);\n  }\n\n  let serviceEntity = new Services(world);\n  world.addComponent(serviceEntity);\n  let staticServices = {};\n\n  if (!staticServices[CODE_LOADER_MODULE_NAME]) {\n    staticServices[CODE_LOADER_MODULE_NAME] = new InitialComponentLoader();\n  }\n\n  for (const key in staticServices) {\n    world.getFirstComponentByType(Services.name).setService(key, staticServices[key]);\n  }\n\n  staticServices[CODE_LOADER_MODULE_NAME].startLoading(world, initialScene, loadedCallBack, moduleStorage).then(() => {\n    finished(world);\n  });\n  return world;\n}\nasync function createWorld() {\n  let initialScene = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    version: "2.0",\n    entities: []\n  };\n  let loadedCallBack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n  let moduleStorage = arguments.length > 2 ? arguments[2] : undefined;\n  let world = arguments.length > 3 ? arguments[3] : undefined;\n  return new Promise(resolve => {\n    createWorldSync(initialScene, loadedCallBack, resolve, moduleStorage, world);\n  });\n}\n;// CONCATENATED MODULE: ./src/lib/modules/core/loader/DomInit.ts\n\nconst BUILD_VERSION = (__webpack_require__(147)/* .version */ .i8);\nconsole.log("Axolotis-player version :" + BUILD_VERSION);\n\nconst windowReady = callBack => {\n  if (document.readyState === "complete" && document.body) {\n    callBack();\n  } else {\n    window.addEventListener("DOMContentLoaded", callBack);\n  }\n};\n\nasync function initHtmlFromUrl(url) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!config.onProgress) {\n    config.onProgress = (progress, total) => {\n      console.log("[" + url + "] : [" + progress + "/" + total + "]");\n    };\n  }\n\n  if (!config.onLoaded) {\n    config.onLoaded = () => {\n      console.log("[" + url + "] : loading complete");\n    };\n  }\n\n  const r = await fetch(url);\n  const html = await r.text();\n  const parser = new DOMParser();\n  const document = parser.parseFromString(html, "text/html");\n  let scene = document.body.getElementsByTagName("ax-scene"); //TODO assume only one scene\n\n  if (!scene || scene && scene.length == 0) {\n    console.warn("Axolotis scene not found (no tag ax-scene)");\n    config.onLoaded();\n    return;\n  }\n\n  console.log(scene);\n  const world = await createWorld(htmlToJson(scene), config.onProgress);\n  config.onLoaded();\n  return world;\n}\nfunction initHtml() {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!config.onProgress) {\n    config.onProgress = (progress, total) => {\n      console.log("[" + progress + "/" + total + "]");\n    };\n  }\n\n  if (!config.onLoaded) {\n    config.onLoaded = world => {\n      console.log("loading complete");\n    };\n  }\n\n  windowReady(() => {\n    let scene = window.document.body.getElementsByTagName("ax-scene"); //TODO assume only one scene\n\n    if (!scene || scene && scene.length == 0) {\n      console.warn("Axolotis scene not found (no tag ax-scene)");\n      createWorld().then(config.onLoaded);\n      return;\n    }\n\n    console.log(scene);\n    createWorld(htmlToJson(scene), config.onProgress).then(config.onLoaded);\n  });\n}\n\nfunction htmlToJson(scene) {\n  let sceneEl = scene[0];\n  const ret = {\n    version: "2.0",\n    entities: []\n  }; // @ts-ignore\n\n  for (const entity of sceneEl.getElementsByTagName("ax-entity")) {\n    let entityRet = {\n      components: []\n    };\n\n    for (const componentEl of entity.getElementsByTagName("ax-component")) {\n      let correctJson = JSON.stringify({});\n\n      if (componentEl.getAttribute("config")) {\n        //convert relaxed json to proper json\n        correctJson = componentEl.getAttribute("config").replace(/([\'"])?([a-z0-9A-Z_]+)([\'"])?:/g, \'"$2": \');\n      }\n\n      let component = {\n        module: componentEl.getAttribute("module"),\n        config: JSON.parse(correctJson)\n      };\n      entityRet.components.push(component);\n    }\n\n    ret.entities.push(entityRet);\n  }\n\n  return ret;\n}\n;// CONCATENATED MODULE: ./src/lib/modules/core/loader/service/ServiceUtils.ts\n\nfunction getGlobalWorld() {\n  let worlds = getGlobalStorageValue(GLOBAL_WORLDS_ENTITY, false);\n\n  if (worlds && worlds.length > 0) {\n    return worlds[0];\n  } else {\n    throw new Error("No Axolotis world initialized");\n  }\n}\nfunction getServiceSync(serviceName) {\n  let world = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (!world) {\n    world = getGlobalWorld();\n  }\n\n  return world.getFirstComponentByType(Services.name).getServiceSync(serviceName);\n}\nasync function getService(serviceName) {\n  let world = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (!world) {\n    world = getGlobalWorld();\n  }\n\n  return world.getFirstComponentByType(Services.name).getService(serviceName);\n}\n;// CONCATENATED MODULE: ./src/lib/modules/core/loader/entity/LazyEntity.ts\n\n\n\nclass LazyEntity extends ecs_Entity {\n  constructor(world) {\n    super();\n    this.world = world;\n  }\n\n  async addComponentAsync(moduleName) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let services = this.world.getFirstComponentByType(Services.name);\n    let codeLoader = await services.getService(CODE_LOADER_MODULE_NAME);\n    let modulePromise = instantiateAsyncModule(moduleName, codeLoader.getModuleStorage(), this.world, config || {});\n    let module = await await modulePromise;\n    let component = module.getType ? module : await module.createComponent(this.world, config || {});\n    return component;\n  }\n\n  getType() {\n    return LazyEntity.name;\n  }\n\n}\n;// CONCATENATED MODULE: ./src/lib/modules/core/loader/Item.ts\n\n/**\n * An Item (or SmartItem) is a set of Module (Services and/or Component)\n */\n\nfunction registerItem(item) {\n  let modules = item.modules();\n\n  for (const key in modules) {\n    registerLocalModule(key, modules[key]);\n  }\n}\n;// CONCATENATED MODULE: ./src/lib/index.ts\n/*\n * Defines what is exported\n * */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///660\n')},147:function(Q){Q.exports={i8:"2.0.0"}}},__webpack_module_cache__={};function __webpack_require__(Q){var B=__webpack_module_cache__[Q];if(void 0!==B)return B.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.d=function(Q,B){for(var F in B)__webpack_require__.o(B,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:B[F]})},__webpack_require__.o=function(Q,B){return Object.prototype.hasOwnProperty.call(Q,B)},__webpack_require__.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(660);return __webpack_exports__}()}));