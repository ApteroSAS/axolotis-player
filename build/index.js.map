{"version":3,"file":"index.js","mappings":"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","sources":["webpack://axolotis-player/webpack/universalModuleDefinition","webpack://axolotis-player/webpack/bootstrap","webpack://axolotis-player/webpack/runtime/define property getters","webpack://axolotis-player/webpack/runtime/hasOwnProperty shorthand","webpack://axolotis-player/webpack/runtime/make namespace object","webpack://axolotis-player/./src/lib/modules/core/ecs/Entity.ts","webpack://axolotis-player/./src/lib/modules/core/ecs/WorldEntity.ts","webpack://axolotis-player/./src/lib/modules/core/loader/Global.ts","webpack://axolotis-player/./src/lib/modules/core/loader/LocalLoader.ts","webpack://axolotis-player/./src/lib/modules/core/loader/JsLoader.ts","webpack://axolotis-player/./src/lib/modules/core/loader/InitialComponentLoader.ts","webpack://axolotis-player/./src/lib/modules/core/loader/CodeLoader.ts","webpack://axolotis-player/./src/lib/modules/core/loader/service/LazyServices.ts","webpack://axolotis-player/./src/lib/modules/core/loader/service/Services.ts","webpack://axolotis-player/./src/lib/modules/core/loader/BasicInit.ts","webpack://axolotis-player/./src/lib/modules/core/loader/DomInit.ts","webpack://axolotis-player/./src/lib/modules/core/loader/service/ServiceUtils.ts","webpack://axolotis-player/./src/lib/modules/core/loader/entity/LazyEntity.ts","webpack://axolotis-player/./src/lib/modules/core/loader/Item.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"axolotis-player\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"axolotis-player\"] = factory();\n\telse\n\t\troot[\"axolotis-player\"] = factory();\n})(this, function() {\nreturn ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Component } from \"./Component\";\n\nexport class Entity implements Component {\n  private components: Component[] = [];\n\n  constructor() {}\n\n  public addComponent<T extends Component>(component: T): T {\n    if (component.init) {\n      component.init();\n    }\n    this.components.push(component);\n    return component;\n  }\n\n  public removeAllComponents() {\n    this.components.forEach((comp) => {\n      this.removeComponent(comp);\n    });\n  }\n\n  public removeComponent<T extends Component>(component: T): T {\n    if (component.destroy) {\n      component.destroy();\n    }\n    this.components = this.components.filter((comp) => {\n      return comp != component;\n    });\n    return component;\n  }\n\n  public addComponents(components: Component[]) {\n    components.forEach((comp) => {\n      this.addComponent(comp);\n    });\n  }\n\n  public getComponents(): Component[] {\n    return this.components;\n  }\n\n  public getComponentByType<T extends Component>(type: string): T[] {\n    let ret: T[] = [];\n    this.components.forEach((comp) => {\n      if (comp.getType() === type) {\n        ret.push(comp as T);\n      }\n    });\n    return ret;\n  }\n\n  public getComponentByTypeStartsWith(type: string): Component[] {\n    let ret: Component[] = [];\n    this.components.forEach((comp) => {\n      if (comp.getType().startsWith(type)) {\n        ret.push(comp);\n      }\n    });\n    return ret;\n  }\n\n  public getFirstComponentByTypeStartsWith<T extends Component>(type: string): T {\n    return this.getComponentByTypeStartsWith(type)[0] as T;\n  }\n\n  public getFirstComponentByType<T extends Component>(type: string): T {\n    return this.getComponentByType(type)[0] as T;\n  }\n\n  public getType(): string {\n    return \"Entity\";\n  }\n}\n\nexport default Entity;\n","import Entity from \"@root/lib/modules/core/ecs/Entity\";\n\nexport class WorldEntity extends Entity {\n  constructor() {\n    super();\n  }\n  public getType(): string {\n    return \"WorldEntity\";\n  }\n}\n","var axolotis = null;\n\nexport const GLOBAL_WORLDS_ENTITY = \"worlds\";\nexport const GLOBAL_LOCAL_MODULE = \"localModules\";\n\nexport function getGlobalStorage(): any {\n  //not axolotis in window => create it\n  if (typeof window !== \"undefined\") {\n    if (!(window as any).axolotis) {\n      (window as any).axolotis = {};\n    }\n  }\n\n  //axolotis var not initialized with window\n  if (!axolotis && typeof window !== \"undefined\") {\n    axolotis = (window as any).axolotis;\n  }\n\n  if (!axolotis) {\n    axolotis = {};\n  }\n\n  return axolotis;\n}\n\nexport function setGlobalStorageValue(key, value) {\n  let globalStorage = getGlobalStorage();\n  globalStorage[key] = value;\n}\n\nexport function getGlobalStorageValue<T>(key, auto: boolean = true): T {\n  let globalStorage = getGlobalStorage();\n  if (!globalStorage[key] && auto) {\n    globalStorage[key] = {};\n  }\n  return globalStorage[key] as T;\n}\n","import {getGlobalStorageValue} from \"@root/lib/modules/core/loader/Global\";\nimport Component from \"../ecs/Component\";\nimport {WorldEntity} from \"../ecs/WorldEntity\";\nimport {ComponentName, Services} from \"./service/Services\";\nimport {GLOBAL_LOCAL_MODULE, getService} from \"@root/lib\";\n\nexport type ModulePromise = (() => Promise<LongModule>) | (() => Promise<ShortModule>);\nexport type LongModule = { module: any; classname: string }; //in case there is several export in the file\nexport type ShortModule = { default: { name: string } }; //In this case the js module must be the default export of the class\nexport interface LocalModules {\n    [id: string]: ModulePromise;\n}\n\nconst preloadModules: Promise<any>[] = [];\n\nexport async function waitPreload() {\n    return await Promise.all(preloadModules);\n}\n\nexport function registerLocalModule(name: string, module: ModulePromise, moduleStorage?: LocalModules, preload = false) {\n    if (!moduleStorage) {\n        moduleStorage = getGlobalStorageValue<LocalModules>(GLOBAL_LOCAL_MODULE); //GG name\n    }\n    if (moduleStorage[name]) {\n        throw new Error(\"Module already defined\");\n    }\n    moduleStorage[name] = module;\n    if (preload) {\n        preloadModules.push(getService(name));\n    }\n}\n\nfunction getClassName(module: any): string {\n    if (module.classname) {\n        //LongModule Case\n        return module.classname;\n    } else if (module.default && module.default.name) {\n        //ShortModule case\n        return module.default.name;\n    } else {\n        console.error(module);\n        throw new Error(\"Malformed module\");\n    }\n}\n\nexport async function instantiateLocalAsyncModule<T>(fqcn: string, localModules: LocalModules, world: WorldEntity, config?: any): Promise<T> {\n    const localModule = await localModules[fqcn]();\n    let module = (localModule as any).module;\n    if (!module) {\n        module = localModule; //SortModule case definition\n    }\n\n    let duplicateCheck = {};\n    let useKeyOnly = false;\n    for (const key in module) {\n        const sub = module[key];\n        if (sub.prototype && sub.prototype.constructor.name) {\n            if (duplicateCheck[sub.prototype.constructor.name]) {\n                useKeyOnly = true;\n                //console.info(\"[axolotis] duplicated constructor module name found (switching to use key only) : \" + sub.prototype.constructor.name);\n            }\n            duplicateCheck[sub.prototype.constructor.name] = true;\n        }\n    }\n\n    for (const key in module) {\n        const sub = module[key];\n        let moduleFound;\n        if (useKeyOnly) {\n            moduleFound = (sub.prototype && sub.prototype.constructor.name === getClassName(localModule)) || key === getClassName(localModule);\n        } else {\n            moduleFound = key === getClassName(localModule);\n        }\n        if (moduleFound) {\n            let DependencyComponentList: Component[] = [];\n            if (sub.dependencies) {\n                for (let i = 0; i < sub.dependencies.length; i++) {\n                    const dep = sub.dependencies[i];\n                    if (!dep) throw new Error(\"invalid dependencies in:\" + getClassName(localModule));\n                    let services = world.getFirstComponentByType<Services>(ComponentName);\n                    let service = await services.getService<Component>(dep);\n                    DependencyComponentList.push(service);\n                }\n            }\n            if (config != undefined) {\n                return new sub(...DependencyComponentList, config);\n            } else {\n                return new sub(...DependencyComponentList);\n            }\n        }\n    }\n    throw new Error(\"invalid submodule \" + fqcn + \" - \" + getClassName(localModule));\n}\n","import Component from \"@root/lib/modules/core/ecs/Component\";\nimport { instantiateLocalAsyncModule, LocalModules } from \"@root/lib/modules/core/loader/LocalLoader\";\nimport { WorldEntity } from \"../ecs/WorldEntity\";\n\nexport async function instantiateAsyncModule<T>(moduleName: string, moduleStorage: LocalModules, world?: WorldEntity, config?: any): Promise<T> {\n  let module = null;\n  if (moduleStorage && moduleStorage[moduleName]) {\n    module = await instantiateLocalAsyncModule<Component>(moduleName, moduleStorage, world, config);\n  } else if (moduleName.startsWith(\"http\")) {\n    //TODO remote module \"https://\"\n    throw new Error(\"remote modules not implemented yet\");\n  } else {\n    console.log(\"local module installed:\", moduleStorage);\n    throw new Error(\"unknown module - please register it - \" + moduleName);\n  }\n  return module;\n}\n","import Component from \"@root/lib/modules/core/ecs/Component\";\nimport { load } from \"@root/lib/modules/core/loader/CodeLoader\";\nimport { WorldEntity } from \"@root/lib/modules/core/ecs/WorldEntity\";\nimport { instantiateAsyncModule } from \"@root/lib/modules/core/loader/JsLoader\";\nimport { WorldDefinition } from \"@root/lib/modules/core/loader/WorldDefinition\";\nimport { LocalModules } from \"@root/lib/modules/core/loader/LocalLoader\";\n\nexport const CODE_LOADER_MODULE_NAME = \"@aptero/axolotis-player/core/loader/InitialComponentLoader\";\n\nexport class InitialComponentLoader implements Component {\n  private initialLoading: Promise<any>;\n  private initialLoadingResolver: ((value: any) => void) | undefined;\n  private moduleStorage: LocalModules;\n\n  constructor() {\n    this.initialLoading = new Promise<any>((resolve) => {\n      this.initialLoadingResolver = resolve;\n    });\n  }\n\n  getType(): string {\n    return \"InitialComponentLoader\";\n  }\n\n  getModuleStorage() {\n    return this.moduleStorage;\n  }\n\n  async awaitInitialLoading() {\n    await this.initialLoading;\n  }\n\n  async startLoading(world: WorldEntity, scene: WorldDefinition, loadedCallBack: (progress: number, total: number) => void, moduleStorage: LocalModules) {\n    this.moduleStorage = moduleStorage;\n    if (scene.version !== \"2.0\") {\n      throw new Error(\"unsupported\");\n    }\n    let promises: (() => Promise<any>)[] = [];\n    for (const entity of scene.entities) {\n      for (const componentDef of entity.components) {\n        let config = componentDef.config;\n        promises.push(\n          () =>\n            new Promise(async (resolve, reject) => {\n              let module = await instantiateAsyncModule<any>(componentDef.module, moduleStorage, world, config || {}); //module.createComponent(world, config || {});\n              let component = module.getType ? module : ((await module.createComponent(world, config || {})) as Component);\n              if (!component.getType) {\n                throw new Error(\"Not a component : \" + componentDef.module + \" \" + component.constructor.name);\n              }\n              world.addComponent(component); //TODO world default but should ad to an entity\n              resolve(module);\n            })\n        );\n      }\n    }\n\n    let promise = load(promises, loadedCallBack);\n    promise.then((value) => {\n      if (this.initialLoadingResolver !== undefined) {\n        this.initialLoadingResolver(value);\n      }\n    });\n    promise.catch((reason) => {\n      console.error(reason);\n    });\n    return promise;\n  }\n}\n","export function load(modules: (() => Promise<any>)[], loadedCallBack: (progress: number, total: number) => void) {\n  let ret: any[] = [];\n  let nbLoaded = 0;\n  for (const promiseCb of modules) {\n    const promise = promiseCb(); //trigger the load\n    ret.push(promise);\n    promise.then(() => {\n      nbLoaded++;\n      loadedCallBack(nbLoaded, modules.length);\n    });\n  }\n  return Promise.all(ret);\n}\n","import Component from \"@root/lib/modules/core/ecs/Component\";\nimport { instantiateAsyncModule } from \"@root/lib/modules/core/loader/JsLoader\";\nimport { WorldEntity } from \"@root/lib\";\nimport { InitialComponentLoader, CODE_LOADER_MODULE_NAME } from \"@root/lib/modules/core/loader/InitialComponentLoader\";\nimport { IService } from \"@root/lib/modules/core/loader/service/IService\";\n\nexport class LazyServices {\n  constructor(private world: WorldEntity) {}\n\n  serviceAsync: { [id: string]: Promise<IService> | undefined } = {};\n  service: { [id: string]: IService } = {};\n\n  getWorld(): WorldEntity {\n    return this.world;\n  }\n\n  setService(moduleName: string, service: IService, replace = false) {\n    if (!moduleName) throw new Error();\n    if (!replace && (this.serviceAsync[moduleName] || this.service[moduleName])) {\n      throw new Error(\"Service already exist (use replace to force)\");\n    }\n    this.serviceAsync[moduleName] = Promise.resolve(service);\n    this.service[moduleName] = service;\n    if (service.init) {\n      service.init(); //service init\n    }\n  }\n\n  async getService<T extends IService>(moduleName: string): Promise<T> {\n    if (!moduleName) throw new Error();\n    if (!this.serviceAsync[moduleName]) {\n      // it is important to assign value as soon as possible to avoid multiple service creation from rapid getService call.\n      this.serviceAsync[moduleName] = (async () => {\n        let modulesList = ((await this.serviceAsync[CODE_LOADER_MODULE_NAME]) as InitialComponentLoader).getModuleStorage();\n        let modulePromise = instantiateAsyncModule<T>(moduleName, modulesList, this.world);\n        let module: any = await modulePromise;\n        let service: Component = module.getType ? module : await module.createService(this);\n        this.service[moduleName] = service; //module resolved\n        if (service.init) {\n          service.init(); //service init\n        }\n        return service;\n      })();\n    }\n    //service already downloading add this request to queue;\n    const service = await this.serviceAsync[moduleName];\n    if (!service) {\n      throw new Error(\"Internal engine error\");\n    }\n    return service as T;\n  }\n}\n","import Component from \"@root/lib/modules/core/ecs/Component\";\nimport { LazyServices } from \"@root/lib/modules/core/loader/service/LazyServices\";\nimport { IService, IServices } from \"@root/lib\";\n\nexport const ComponentName = \"Services\";\nexport class Services extends LazyServices implements Component, IServices {\n  getType(): string {\n    return ComponentName;\n  }\n\n  getServiceSync<T extends IService>(moduleName: string): T {\n    if (this.service[moduleName]) {\n      return this.service[moduleName] as T;\n    } else {\n      throw new Error(\"service not found : \" + moduleName);\n    }\n  }\n}\n","import { ComponentName, Services } from \"@root/lib/modules/core/loader/service/Services\";\nimport { InitialComponentLoader, CODE_LOADER_MODULE_NAME } from \"@root/lib/modules/core/loader/InitialComponentLoader\";\nimport { getGlobalStorageValue, GLOBAL_LOCAL_MODULE, GLOBAL_WORLDS_ENTITY, setGlobalStorageValue } from \"@root/lib/modules/core/loader/Global\";\nimport { LocalModules } from \"@root/lib/modules/core/loader/LocalLoader\";\nimport { WorldDefinition } from \"@root/lib/modules/core/loader/WorldDefinition\";\nimport { WorldEntity } from \"@root/lib\";\n\nexport function createWorldSync(\n  initialScene: WorldDefinition = {\n    version: \"2.0\",\n    entities: [],\n  },\n  loadedCallBack: (progress: number, total: number) => void = () => {},\n  finished: (world: WorldEntity) => void = () => {},\n  moduleStorage?: LocalModules,\n  world?: WorldEntity\n) {\n  if (!world) {\n    world = new WorldEntity();\n  }\n  if (!getGlobalStorageValue(GLOBAL_WORLDS_ENTITY, false)) {\n    setGlobalStorageValue(GLOBAL_WORLDS_ENTITY, [world]);\n  } else {\n    getGlobalStorageValue<WorldEntity[]>(GLOBAL_WORLDS_ENTITY).push(world);\n  }\n  if (!moduleStorage) {\n    moduleStorage = getGlobalStorageValue<LocalModules>(GLOBAL_LOCAL_MODULE);\n  }\n  let serviceEntity = new Services(world);\n  world.addComponent(serviceEntity);\n\n  let staticServices = {};\n  if (!staticServices[CODE_LOADER_MODULE_NAME]) {\n    staticServices[CODE_LOADER_MODULE_NAME] = new InitialComponentLoader();\n  }\n  for (const key in staticServices) {\n    world.getFirstComponentByType<Services>(ComponentName).setService(key, staticServices[key]);\n  }\n\n  (staticServices[CODE_LOADER_MODULE_NAME] as InitialComponentLoader).startLoading(world, initialScene, loadedCallBack, moduleStorage).then(() => {\n    finished(world);\n  });\n  return world;\n}\n\nexport async function createWorld(\n  initialScene: WorldDefinition = {\n    version: \"2.0\",\n    entities: [],\n  },\n  loadedCallBack: (progress: number, total: number) => void = () => {},\n  moduleStorage?: LocalModules,\n  world?: WorldEntity\n) {\n  return new Promise<WorldEntity>((resolve) => {\n    createWorldSync(initialScene, loadedCallBack, resolve, moduleStorage, world);\n  });\n}\n","import { WorldEntity } from \"@root/lib/modules/core/ecs/WorldEntity\";\nimport { createWorld } from \"@root/lib/modules/core/loader/BasicInit\";\nimport { WorldDefinition, WorldDefinitionV2 } from \"@root/lib/modules/core/loader/WorldDefinition\";\n\nexport const BUILD_VERSION = require(\"../../../../../package.json\").version;\nconsole.log(\"Axolotis-player version :\" + BUILD_VERSION);\n\nconst windowReady = (callBack: () => void) => {\n  if (document.readyState === \"complete\" && document.body) {\n    callBack();\n  } else {\n    window.addEventListener(\"DOMContentLoaded\", callBack);\n  }\n};\n\nexport async function initHtmlFromUrl(\n  url: string,\n  config: {\n    onProgress?: (progress: number, total: number) => void;\n    onLoaded?: () => void;\n  } = {}\n): Promise<WorldEntity> {\n  if (!config.onProgress) {\n    config.onProgress = (progress: number, total: number) => {\n      console.log(\"[\" + url + \"] : [\" + progress + \"/\" + total + \"]\");\n    };\n  }\n  if (!config.onLoaded) {\n    config.onLoaded = () => {\n      console.log(\"[\" + url + \"] : loading complete\");\n    };\n  }\n  const r = await fetch(url);\n  const html = await r.text();\n  const parser = new DOMParser();\n  const document = parser.parseFromString(html, \"text/html\");\n  let scene: HTMLCollection = document.body.getElementsByTagName(\"ax-scene\"); //TODO assume only one scene\n  if (!scene || (scene && scene.length == 0)) {\n    console.warn(\"Axolotis scene not found (no tag ax-scene)\");\n    config.onLoaded();\n    return;\n  }\n  console.log(scene);\n  const world = await createWorld(htmlToJson(scene), config.onProgress);\n  config.onLoaded();\n  return world;\n}\n\nexport function initHtml(\n  config: {\n    onProgress?: (progress: number, total: number) => void;\n    onLoaded?: (world: WorldEntity) => void;\n  } = {}\n) {\n  if (!config.onProgress) {\n    config.onProgress = (progress: number, total: number) => {\n      console.log(\"[\" + progress + \"/\" + total + \"]\");\n    };\n  }\n  if (!config.onLoaded) {\n    config.onLoaded = (world: WorldEntity) => {\n      console.log(\"loading complete\");\n    };\n  }\n  windowReady(() => {\n    let scene: HTMLCollection = window.document.body.getElementsByTagName(\"ax-scene\"); //TODO assume only one scene\n    if (!scene || (scene && scene.length == 0)) {\n      console.warn(\"Axolotis scene not found (no tag ax-scene)\");\n      createWorld().then(config.onLoaded);\n      return;\n    }\n    console.log(scene);\n    createWorld(htmlToJson(scene), config.onProgress).then(config.onLoaded);\n  });\n}\n\nfunction htmlToJson(scene: HTMLCollection): WorldDefinition {\n  let sceneEl = scene[0];\n  const ret: WorldDefinitionV2 = {\n    version: \"2.0\",\n    entities: [],\n  };\n  // @ts-ignore\n  for (const entity of sceneEl.getElementsByTagName(\"ax-entity\")) {\n    let entityRet = { components: [] };\n\n    for (const componentEl of entity.getElementsByTagName(\"ax-component\")) {\n      let correctJson = JSON.stringify({});\n      if (componentEl.getAttribute(\"config\")) {\n        //convert relaxed json to proper json\n        correctJson = componentEl.getAttribute(\"config\").replace(/(['\"])?([a-z0-9A-Z_]+)(['\"])?:/g, '\"$2\": ');\n      }\n      let component = {\n        module: componentEl.getAttribute(\"module\"),\n        config: JSON.parse(correctJson),\n      };\n      entityRet.components.push(component);\n    }\n    ret.entities.push(entityRet);\n  }\n  return ret;\n}\n","import { ComponentName, getGlobalStorageValue, GLOBAL_WORLDS_ENTITY, IService, Services, WorldEntity } from \"@root/lib\";\n\nexport function getGlobalWorld() {\n  let worlds = getGlobalStorageValue<WorldEntity[]>(GLOBAL_WORLDS_ENTITY, false);\n  if (worlds && worlds.length > 0) {\n    return worlds[0];\n  } else {\n    throw new Error(\"No Axolotis world initialized\");\n  }\n}\n\nexport function getServiceSync<T extends IService>(serviceName: string, world: WorldEntity = null): T {\n  if (!world) {\n    world = getGlobalWorld();\n  }\n  return world.getFirstComponentByType<Services>(ComponentName).getServiceSync<T>(serviceName);\n}\n\nexport async function getService<T extends IService>(serviceName: string, world: WorldEntity = null): Promise<T> {\n  if (!world) {\n    world = getGlobalWorld();\n  }\n  return world.getFirstComponentByType<Services>(ComponentName).getService<T>(serviceName);\n}\n","import Entity from \"@root/lib/modules/core/ecs/Entity\";\nimport { instantiateAsyncModule } from \"@root/lib/modules/core/loader/JsLoader\";\nimport Component from \"@root/lib/modules/core/ecs/Component\";\nimport { CODE_LOADER_MODULE_NAME, ComponentName, InitialComponentLoader, Services, WorldEntity } from \"@root/lib\";\n\nexport class LazyEntity extends Entity {\n  constructor(private world: WorldEntity) {\n    super();\n  }\n\n  async addComponentAsync<T extends Component>(moduleName: string, config: any = {}): Promise<T> {\n    let services = this.world.getFirstComponentByType<Services>(ComponentName);\n    let codeLoader = await services.getService<InitialComponentLoader>(CODE_LOADER_MODULE_NAME);\n    let modulePromise = instantiateAsyncModule<T>(moduleName, codeLoader.getModuleStorage(), this.world, config || {});\n\n    let module: any = await await modulePromise;\n    let component = module.getType ? module : ((await module.createComponent(this.world, config || {})) as Component);\n    return component as T;\n  }\n\n  public getType(): string {\n    return \"LazyEntity\";\n  }\n}\n","import { ModulePromise, registerLocalModule } from \"@root/lib\";\n\n/**\n * An Item (or SmartItem) is a set of Module (Services and/or Component)\n */\nexport interface Item {\n  /**\n   * Register Asynchronous/Dynamic Component or Service\n   */\n  modules(): { [id: string]: ModulePromise };\n}\n\nexport function registerItem(item: Item) {\n  let modules = item.modules();\n  for (const key in modules) {\n    registerLocalModule(key, modules[key]);\n  }\n}\n"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","Entity","constructor","addComponent","component","init","components","push","removeAllComponents","forEach","comp","removeComponent","destroy","filter","addComponents","getComponents","getComponentByType","type","ret","getType","getComponentByTypeStartsWith","startsWith","getFirstComponentByTypeStartsWith","getFirstComponentByType","WorldEntity","super","axolotis","GLOBAL_WORLDS_ENTITY","GLOBAL_LOCAL_MODULE","getGlobalStorage","window","setGlobalStorageValue","getGlobalStorageValue","auto","globalStorage","preloadModules","async","waitPreload","Promise","all","registerLocalModule","name","moduleStorage","preload","Error","getService","getClassName","classname","default","console","error","instantiateLocalAsyncModule","fqcn","localModules","world","config","localModule","duplicateCheck","useKeyOnly","sub","moduleFound","DependencyComponentList","dependencies","i","length","dep","services","ComponentName","service","instantiateAsyncModule","moduleName","log","CODE_LOADER_MODULE_NAME","InitialComponentLoader","initialLoading","resolve","initialLoadingResolver","getModuleStorage","scene","loadedCallBack","version","promises","entity","entities","componentDef","reject","createComponent","promise","load","modules","nbLoaded","promiseCb","then","catch","reason","LazyServices","getWorld","setService","replace","serviceAsync","modulesList","modulePromise","createService","Services","getServiceSync","createWorldSync","initialScene","finished","serviceEntity","staticServices","startLoading","createWorld","BUILD_VERSION","require","windowReady","callBack","document","readyState","body","addEventListener","initHtmlFromUrl","url","onProgress","progress","total","onLoaded","fetch","html","text","parser","DOMParser","parseFromString","getElementsByTagName","warn","htmlToJson","initHtml","sceneEl","entityRet","componentEl","correctJson","JSON","stringify","getAttribute","parse","getGlobalWorld","worlds","serviceName","LazyEntity","registerItem","item"],"sourceRoot":""}