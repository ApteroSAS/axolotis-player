{"version":3,"file":"index.js","mappings":"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","sources":["webpack://axolotis-player/webpack/universalModuleDefinition","webpack://axolotis-player/webpack/bootstrap","webpack://axolotis-player/webpack/runtime/define property getters","webpack://axolotis-player/webpack/runtime/hasOwnProperty shorthand","webpack://axolotis-player/webpack/runtime/make namespace object","webpack://axolotis-player/./src/lib/modules/core/ecs/Entity.ts","webpack://axolotis-player/./src/lib/modules/core/ecs/WorldEntity.ts","webpack://axolotis-player/./src/lib/modules/core/loader/Global.ts","webpack://axolotis-player/./src/lib/modules/core/loader/LocalLoader.ts","webpack://axolotis-player/./src/lib/modules/core/loader/JsLoader.ts","webpack://axolotis-player/./src/lib/modules/core/loader/InitialComponentLoader.ts","webpack://axolotis-player/./src/lib/modules/core/loader/CodeLoader.ts","webpack://axolotis-player/./src/lib/modules/core/loader/service/LazyServices.ts","webpack://axolotis-player/./src/lib/modules/core/loader/service/Services.ts","webpack://axolotis-player/./src/lib/modules/core/loader/BasicInit.ts","webpack://axolotis-player/./src/lib/modules/core/loader/DomInit.ts","webpack://axolotis-player/./src/lib/modules/core/loader/service/ServiceUtils.ts","webpack://axolotis-player/./src/lib/modules/core/loader/entity/LazyEntity.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"axolotis-player\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"axolotis-player\"] = factory();\n\telse\n\t\troot[\"axolotis-player\"] = factory();\n})(this, function() {\nreturn ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Component } from \"./Component\";\n\nexport class Entity implements Component {\n  private components: Component[] = [];\n\n  constructor() {}\n\n  public addComponent<T extends Component>(component: T): T {\n    if (component.init) {\n      component.init();\n    }\n    this.components.push(component);\n    return component;\n  }\n\n  public removeAllComponents() {\n    this.components.forEach((comp) => {\n      this.removeComponent(comp);\n    });\n  }\n\n  public removeComponent<T extends Component>(component: T): T {\n    if (component.destroy) {\n      component.destroy();\n    }\n    this.components = this.components.filter((comp) => {\n      return comp != component;\n    });\n    return component;\n  }\n\n  public addComponents(components: Component[]) {\n    components.forEach((comp) => {\n      this.addComponent(comp);\n    });\n  }\n\n  public getComponents(): Component[] {\n    return this.components;\n  }\n\n  public getComponentByType<T extends Component>(type: string): T[] {\n    let ret: T[] = [];\n    this.components.forEach((comp) => {\n      if (comp.getType() === type) {\n        ret.push(comp as T);\n      }\n    });\n    return ret;\n  }\n\n  public getComponentByTypeStartsWith(type: string): Component[] {\n    let ret: Component[] = [];\n    this.components.forEach((comp) => {\n      if (comp.getType().startsWith(type)) {\n        ret.push(comp);\n      }\n    });\n    return ret;\n  }\n\n  public getFirstComponentByTypeStartsWith<T extends Component>(type: string): T {\n    return this.getComponentByTypeStartsWith(type)[0] as T;\n  }\n\n  public getFirstComponentByType<T extends Component>(type: string): T {\n    return this.getComponentByType(type)[0] as T;\n  }\n\n  public getType(): string {\n    return Entity.name;\n  }\n}\n\nexport default Entity;\n","import Entity from \"@root/lib/modules/core/ecs/Entity\";\n\nexport class WorldEntity extends Entity {\n  constructor() {\n    super();\n  }\n  public getType(): string {\n    return WorldEntity.name;\n  }\n}\n","var axolotis = null;\n\nexport function getGlobalStorage<T>(key): T {\n  //not axolotis in window => create it\n  if (typeof window !== \"undefined\") {\n    if (!(window as any).axolotis) {\n      (window as any).axolotis = {};\n    }\n  }\n\n  //axolotis var not initialized with window\n  if (!axolotis && typeof window !== \"undefined\") {\n    axolotis = (window as any).axolotis;\n  }\n\n  if (!axolotis) {\n    axolotis = {};\n  }\n\n  if (!axolotis[key]) {\n    axolotis[key] = {};\n  }\n  return axolotis[key] as T;\n}\n","import { getGlobalStorage } from \"@root/lib/modules/core/loader/Global\";\nimport Component from \"../ecs/Component\";\nimport { WorldEntity } from \"../ecs/WorldEntity\";\nimport { Service } from \"./service/Service\";\nimport { Services } from \"./service/Services\";\n\nexport type Module = () => Promise<{ module: any; classname: string }>;\nexport interface LocalModules {\n  [id: string]: Module;\n}\n\nexport function registerLocalModule(name: string, module: Module, moduleStorage?: LocalModules) {\n  if (!moduleStorage) {\n    moduleStorage = getGlobalStorage<LocalModules>(\"localModules\");\n  }\n  if (moduleStorage[name]) {\n    throw new Error(\"Module already defined\");\n  }\n  moduleStorage[name] = module;\n}\n\nexport function registerLocalModuleList(localModulesList: LocalModules, verbose: boolean = false, moduleStorage?: LocalModules) {\n  if (!moduleStorage) {\n    moduleStorage = getGlobalStorage<LocalModules>(\"localModules\");\n  }\n  if (verbose) {\n    console.log(\"imported module :\", localModulesList);\n  }\n  Object.assign(moduleStorage, localModulesList);\n}\n\nexport async function instantiateLocalAsyncModule<T>(fqcn: string, localModules: LocalModules, world: WorldEntity, config?: any): Promise<T> {\n  const localModule = await localModules[fqcn]();\n  const module = localModule.module;\n  for (const key in module) {\n    const sub = module[key];\n    if (sub.prototype && sub.prototype.constructor.name === localModule.classname) {\n      let DependencyComponentList: Component[] = [];\n      if (sub.dependencies) {\n        for (let i = 0; i < sub.dependencies.length; i++) {\n          const dep = sub.dependencies[i];\n          let services = world.getFirstComponentByType<Services>(Services.name);\n          let service = await services.getService<Component>(dep);\n          DependencyComponentList.push(service);\n        }\n      }\n      if (config != undefined) {\n        return new sub(...DependencyComponentList, config);\n      } else {\n        return new sub(...DependencyComponentList);\n      }\n    }\n  }\n  throw new Error(\"invalid submodule \" + fqcn + \" - \" + localModule.classname);\n}\n","import { ComponentFactory } from \"@root/lib/modules/core/ecs/ComponentFactory\";\nimport Component from \"@root/lib/modules/core/ecs/Component\";\nimport { instantiateLocalAsyncModule, LocalModules } from \"@root/lib/modules/core/loader/LocalLoader\";\nimport { WorldEntity } from \"../ecs/WorldEntity\";\n\nexport async function instantiateAsyncModule<T>(moduleName: string, moduleStorage: LocalModules, world?: WorldEntity, config?: any): Promise<T> {\n  let module = null;\n  if (moduleStorage && moduleStorage[moduleName]) {\n    module = await instantiateLocalAsyncModule<Component>(moduleName, moduleStorage, world, config);\n  } else if (moduleName.startsWith(\"http\")) {\n    //TODO remote module \"https://\"\n    throw new Error(\"remote modules not implemented yet\");\n  } else {\n    console.log(\"local module installed:\", moduleStorage);\n    throw new Error(\"unknown module - please register it - \" + moduleName);\n  }\n  return module;\n}\n","import Component from \"@root/lib/modules/core/ecs/Component\";\nimport { load } from \"@root/lib/modules/core/loader/CodeLoader\";\nimport { ComponentFactory } from \"@root/lib/modules/core/ecs/ComponentFactory\";\nimport { WorldEntity } from \"@root/lib/modules/core/ecs/WorldEntity\";\nimport { instantiateAsyncModule } from \"@root/lib/modules/core/loader/JsLoader\";\nimport { WorldDefinition } from \"@root/lib/modules/core/loader/WorldDefinition\";\nimport { LocalModules } from \"@root/lib/modules/core/loader/LocalLoader\";\n\nexport const CODE_LOADER_MODULE_NAME = \"@aptero/axolotis-player/core/loader/InitialComponentLoader\";\n\nexport class InitialComponentLoader implements Component {\n  private initialLoading: Promise<any>;\n  private initialLoadingResolver: ((value: any) => void) | undefined;\n  private moduleStorage: LocalModules;\n\n  constructor() {\n    this.initialLoading = new Promise<any>((resolve) => {\n      this.initialLoadingResolver = resolve;\n    });\n  }\n\n  getType(): string {\n    return InitialComponentLoader.name;\n  }\n\n  getModuleStorage() {\n    return this.moduleStorage;\n  }\n\n  async awaitInitialLoading() {\n    await this.initialLoading;\n  }\n\n  async startLoading(world: WorldEntity, scene: WorldDefinition, loadedCallBack: (progress: number, total: number) => void, moduleStorage: LocalModules) {\n    this.moduleStorage = moduleStorage;\n    if (scene.version !== \"2.0\") {\n      throw new Error(\"unsupported\");\n    }\n    let promises: (() => Promise<any>)[] = [];\n    for (const entity of scene.entities) {\n      for (const componentDef of entity.components) {\n        let config = componentDef.config;\n        promises.push(\n          () =>\n            new Promise(async (resolve, reject) => {\n              let module = await instantiateAsyncModule<any>(componentDef.module, moduleStorage, world, config || {}); //module.createComponent(world, config || {});\n              let component = module.getType ? module : ((await module.createComponent(world, config || {})) as Component);\n              if (!component.getType) {\n                throw new Error(\"Not a component : \" + componentDef.module + \" \" + component.constructor.name);\n              }\n              world.addComponent(component); //TODO world default but should ad to an entity\n              resolve(module);\n            })\n        );\n      }\n    }\n\n    let promise = load(promises, loadedCallBack);\n    promise.then((value) => {\n      if (this.initialLoadingResolver !== undefined) {\n        this.initialLoadingResolver(value);\n      }\n    });\n    promise.catch((reason) => {\n      console.error(reason);\n    });\n    return promise;\n  }\n}\n","export function load(modules: (() => Promise<any>)[], loadedCallBack: (progress: number, total: number) => void) {\n  let ret: any[] = [];\n  let nbLoaded = 0;\n  for (const promiseCb of modules) {\n    const promise = promiseCb(); //trigger the load\n    ret.push(promise);\n    promise.then(() => {\n      nbLoaded++;\n      loadedCallBack(nbLoaded, modules.length);\n    });\n  }\n  return Promise.all(ret);\n}\n","import Component from \"@root/lib/modules/core/ecs/Component\";\nimport { instantiateAsyncModule } from \"@root/lib/modules/core/loader/JsLoader\";\nimport { WorldEntity } from \"@root/lib\";\nimport { InitialComponentLoader, CODE_LOADER_MODULE_NAME } from \"@root/lib/modules/core/loader/InitialComponentLoader\";\nimport { IService } from \"@root/lib/modules/core/loader/service/IService\";\n\nexport class LazyServices {\n  constructor(private world: WorldEntity) {}\n\n  serviceAsync: { [id: string]: Promise<IService> | undefined } = {};\n  service: { [id: string]: IService } = {};\n\n  getWorld(): WorldEntity {\n    return this.world;\n  }\n\n  setService(moduleName: string, service: IService) {\n    this.serviceAsync[moduleName] = Promise.resolve(service);\n    this.service[moduleName] = service;\n  }\n\n  async getService<T extends IService>(moduleName: string): Promise<T> {\n    if (this.serviceAsync[moduleName]) {\n      const module = await this.serviceAsync[moduleName];\n      if (!module) {\n        throw new Error(\"error\");\n      }\n      this.service[moduleName] = module; //module resolved\n      return module as T;\n    }\n    if (!this.serviceAsync[moduleName]) {\n      let modulesList = ((await this.serviceAsync[CODE_LOADER_MODULE_NAME]) as InitialComponentLoader).getModuleStorage();\n      let modulePromise = instantiateAsyncModule<T>(moduleName, modulesList, this.world);\n      this.serviceAsync[moduleName] = new Promise(async (resolve) => {\n        let module: any = await modulePromise;\n        let t: Component = module.getType ? module : await module.createService(this);\n        this.service[moduleName] = module; //module resolved\n        resolve(t);\n      });\n    }\n    return (await this.serviceAsync[moduleName]) as T;\n  }\n}\n","import Component from \"@root/lib/modules/core/ecs/Component\";\nimport { LazyServices } from \"@root/lib/modules/core/loader/service/LazyServices\";\nimport { IService, IServices } from \"@root/lib\";\n\nexport class Services extends LazyServices implements Component, IServices {\n  getType(): string {\n    return Services.name;\n  }\n\n  getServiceSync<T extends IService>(moduleName: string): T {\n    if (this.service[moduleName]) {\n      return this.service[moduleName] as T;\n    } else {\n      throw new Error(\"service not found\");\n    }\n  }\n}\n","import { Services } from \"@root/lib/modules/core/loader/service/Services\";\nimport { WorldEntity } from \"@root/lib\";\nimport { InitialComponentLoader, CODE_LOADER_MODULE_NAME } from \"@root/lib/modules/core/loader/InitialComponentLoader\";\nimport { getGlobalStorage } from \"@root/lib/modules/core/loader/Global\";\nimport { LocalModules } from \"@root/lib/modules/core/loader/LocalLoader\";\nimport { WorldDefinition } from \"@root/lib/modules/core/loader/WorldDefinition\";\n\nexport async function createWorld(\n  initialScene: WorldDefinition = {\n    version: \"2.0\",\n    entities: [],\n  },\n  loadedCallBack: (progress: number, total: number) => void = () => {},\n  moduleStorage?: LocalModules,\n  world?: WorldEntity\n) {\n  if (!world) {\n    world = new WorldEntity();\n  }\n  if (!moduleStorage) {\n    moduleStorage = getGlobalStorage<LocalModules>(\"localModules\");\n  }\n  let serviceEntity = new Services(world);\n  world.addComponent(serviceEntity);\n  let codeLoaderComponent = new InitialComponentLoader();\n  serviceEntity.setService(CODE_LOADER_MODULE_NAME, codeLoaderComponent);\n  await codeLoaderComponent.startLoading(world, initialScene, loadedCallBack, moduleStorage);\n  return world;\n}\n","import { WorldEntity } from \"@root/lib/modules/core/ecs/WorldEntity\";\nimport { createWorld } from \"@root/lib/modules/core/loader/BasicInit\";\nimport { WorldDefinition, WorldDefinitionV2 } from \"@root/lib/modules/core/loader/WorldDefinition\";\n\nexport const BUILD_VERSION = require(\"../../../../../package.json\").version;\nconsole.log(\"Axolotis-player version :\" + BUILD_VERSION);\n\nconst windowReady = (callBack: () => void) => {\n  if (document.readyState === \"complete\" && document.body) {\n    callBack();\n  } else {\n    window.addEventListener(\"DOMContentLoaded\", callBack);\n  }\n};\n\nexport async function initHtmlFromUrl(\n  url: string,\n  config: {\n    onProgress?: (progress: number, total: number) => void;\n    onLoaded?: () => void;\n  } = {}\n): Promise<WorldEntity> {\n  if (!config.onProgress) {\n    config.onProgress = (progress: number, total: number) => {\n      console.log(\"[\" + url + \"] : [\" + progress + \"/\" + total + \"]\");\n    };\n  }\n  if (!config.onLoaded) {\n    config.onLoaded = () => {\n      console.log(\"[\" + url + \"] : loading complete\");\n    };\n  }\n  const r = await fetch(url);\n  const html = await r.text();\n  const parser = new DOMParser();\n  const document = parser.parseFromString(html, \"text/html\");\n  let scene: HTMLCollection = document.body.getElementsByTagName(\"ax-scene\"); //TODO assume only one scene\n  if (!scene || (scene && scene.length == 0)) {\n    console.warn(\"Axolotis scene not found (no tag ax-scene)\");\n    config.onLoaded();\n    return;\n  }\n  console.log(scene);\n  const world = await createWorld(htmlToJson(scene), config.onProgress);\n  config.onLoaded();\n  return world;\n}\n\nexport function initHtml(\n  config: {\n    onProgress?: (progress: number, total: number) => void;\n    onLoaded?: (world: WorldEntity) => void;\n  } = {}\n) {\n  if (!config.onProgress) {\n    config.onProgress = (progress: number, total: number) => {\n      console.log(\"[\" + progress + \"/\" + total + \"]\");\n    };\n  }\n  if (!config.onLoaded) {\n    config.onLoaded = (world: WorldEntity) => {\n      console.log(\"loading complete\");\n    };\n  }\n  windowReady(() => {\n    let scene: HTMLCollection = window.document.body.getElementsByTagName(\"ax-scene\"); //TODO assume only one scene\n    if (!scene || (scene && scene.length == 0)) {\n      console.warn(\"Axolotis scene not found (no tag ax-scene)\");\n      createWorld().then(config.onLoaded);\n      return;\n    }\n    console.log(scene);\n    createWorld(htmlToJson(scene), config.onProgress).then(config.onLoaded);\n  });\n}\n\nfunction htmlToJson(scene: HTMLCollection): WorldDefinition {\n  let sceneEl = scene[0];\n  const ret: WorldDefinitionV2 = {\n    version: \"2.0\",\n    entities: [],\n  };\n  // @ts-ignore\n  for (const entity of sceneEl.getElementsByTagName(\"ax-entity\")) {\n    let entityRet = { components: [] };\n\n    for (const componentEl of entity.getElementsByTagName(\"ax-component\")) {\n      let correctJson = JSON.stringify({});\n      if (componentEl.getAttribute(\"config\")) {\n        //convert relaxed json to proper json\n        correctJson = componentEl.getAttribute(\"config\").replace(/(['\"])?([a-z0-9A-Z_]+)(['\"])?:/g, '\"$2\": ');\n      }\n      let component = {\n        module: componentEl.getAttribute(\"module\"),\n        config: JSON.parse(correctJson),\n      };\n      entityRet.components.push(component);\n    }\n    ret.entities.push(entityRet);\n  }\n  return ret;\n}\n","import { IService, Services, WorldEntity } from \"@root/lib\";\n\nexport function getServiceSync<T extends IService>(world: WorldEntity, serviceName: string): T {\n  return world.getFirstComponentByType<Services>(Services.name).getServiceSync<T>(serviceName);\n}\n\nexport async function getService<T extends IService>(world: WorldEntity, serviceName: string): Promise<T> {\n  return world.getFirstComponentByType<Services>(Services.name).getService<T>(serviceName);\n}\n","import Entity from \"@root/lib/modules/core/ecs/Entity\";\nimport { instantiateAsyncModule } from \"@root/lib/modules/core/loader/JsLoader\";\nimport Component from \"@root/lib/modules/core/ecs/Component\";\nimport { ComponentFactory } from \"@root/lib/modules/core/ecs/ComponentFactory\";\nimport { CODE_LOADER_MODULE_NAME, InitialComponentLoader, Services, WorldEntity } from \"@root/lib\";\n\nexport class LazyEntity extends Entity {\n  constructor(private world: WorldEntity) {\n    super();\n  }\n\n  async addComponentAsync<T extends Component>(moduleName: string, config: any = {}): Promise<T> {\n    let services = this.world.getFirstComponentByType<Services>(Services.name);\n    let codeLoader = await services.getService<InitialComponentLoader>(CODE_LOADER_MODULE_NAME);\n    let modulePromise = instantiateAsyncModule<T>(moduleName, codeLoader.getModuleStorage(), this.world, config || {});\n\n    let module: any = await await modulePromise;\n    let component = module.getType ? module : ((await module.createComponent(this.world, config || {})) as Component);\n    return component as T;\n  }\n\n  public getType(): string {\n    return LazyEntity.name;\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","Entity","constructor","addComponent","component","init","components","push","removeAllComponents","forEach","comp","removeComponent","destroy","filter","addComponents","getComponents","getComponentByType","type","ret","getType","getComponentByTypeStartsWith","startsWith","getFirstComponentByTypeStartsWith","getFirstComponentByType","name","WorldEntity","super","axolotis","getGlobalStorage","window","registerLocalModule","moduleStorage","Error","registerLocalModuleList","localModulesList","verbose","console","log","assign","async","instantiateLocalAsyncModule","fqcn","localModules","world","config","localModule","sub","classname","DependencyComponentList","dependencies","i","length","dep","services","Services","service","getService","instantiateAsyncModule","moduleName","CODE_LOADER_MODULE_NAME","InitialComponentLoader","initialLoading","Promise","resolve","initialLoadingResolver","getModuleStorage","scene","loadedCallBack","version","promises","entity","entities","componentDef","reject","createComponent","promise","modules","nbLoaded","promiseCb","then","all","load","catch","reason","error","LazyServices","getWorld","setService","serviceAsync","modulesList","modulePromise","t","createService","getServiceSync","createWorld","initialScene","serviceEntity","codeLoaderComponent","startLoading","BUILD_VERSION","require","windowReady","callBack","document","readyState","body","addEventListener","initHtmlFromUrl","url","onProgress","progress","total","onLoaded","fetch","html","text","parser","DOMParser","parseFromString","getElementsByTagName","warn","htmlToJson","initHtml","sceneEl","entityRet","componentEl","correctJson","JSON","stringify","getAttribute","replace","parse","serviceName","LazyEntity"],"sourceRoot":""}