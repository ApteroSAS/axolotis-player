{"version":3,"file":"index.js","mappings":"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","sources":["webpack://axolotis-player/webpack/universalModuleDefinition","webpack://axolotis-player/./src/lib/modules/FrameLoop.ts","webpack://axolotis-player/./src/lib/modules/core/WorldService.ts","webpack://axolotis-player/./src/lib/modules/core/loader/JsLoader.ts","webpack://axolotis-player/./src/lib/modules/core/loader/LocalLoader.ts","webpack://axolotis-player/./src/lib/generated/webpack/module/WebpackLoader.ts","webpack://axolotis-player/./src/lib/modules/core/loader/global.ts","webpack://axolotis-player/./src/lib/modules/core/service/LazyServices.ts","webpack://axolotis-player/./src/lib/modules/core/service/ServiceEntity.ts","webpack://axolotis-player/webpack/bootstrap","webpack://axolotis-player/webpack/runtime/define property getters","webpack://axolotis-player/webpack/runtime/hasOwnProperty shorthand","webpack://axolotis-player/webpack/runtime/make namespace object","webpack://axolotis-player/./src/lib/modules/core/loader/CodeLoaderComponent.ts","webpack://axolotis-player/./src/lib/modules/core/loader/CodeLoader.ts","webpack://axolotis-player/./src/lib/modules/core/ecs/Entity.ts","webpack://axolotis-player/./src/lib/modules/core/ecs/WorldEntity.ts","webpack://axolotis-player/./src/lib/modules/core/loader/CoreInit.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"axolotis-player\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"axolotis-player\"] = factory();\n\telse\n\t\troot[\"axolotis-player\"] = factory();\n})(self, function() {\nreturn ","import Component from \"@root/lib/modules/core/ecs/Component\";\n\nimport { CodeLoaderComponent } from \"@root/lib/modules/core/loader/CodeLoaderComponent\";\nimport {\n  LazyServices,\n  Service,\n} from \"@root/lib/modules/core/service/LazyServices\";\nimport { WebpackLazyModule } from \"@root/lib/modules/core/loader/WebpackLoader\";\n\nexport class Factory implements WebpackLazyModule, Service<FrameLoop> {\n  async createService(services: LazyServices): Promise<FrameLoop> {\n    let codeLoader = await services.getService<CodeLoaderComponent>(\n      \"@aptero/axolotis-player/modules/core/loader/CodeLoaderService\"\n    );\n    let module = new FrameLoop();\n    codeLoader.awaitInitialLoading().then(() => {\n      module.startAnimationFrameLoop();\n    });\n    return module;\n  }\n}\n\nexport class FrameLoop implements Component {\n  //TODO frame loop\n  // setInterval Frameloop\n  // animationFrame\n  // Physic update\n  // low workload adaptative loop? Like when FPS is green we execute code once evry Frame when it is not we execute once every seconde.\n  // worker loop?\n  // stats for all those loop (stats.js)\n  // API to add task consumer?\n  //callbacks:((delta:number)=>void)[] = [];\n  loops: { [id: string]: (delta: number) => void } = {};\n  private prevTime: number = 0;\n  private monitoringStart: (name) => void = () => {};\n  private monitoringEnd: (name) => void = () => {};\n  constructor() {}\n\n  startAnimationFrameLoop() {\n    const animate = (t) => {\n      this.monitoringStart(FrameLoop.name);\n      const delta = t - this.prevTime;\n      this.prevTime = t;\n      requestAnimationFrame(animate);\n      for (const callback in this.loops) {\n        this.monitoringStart(callback);\n        this.loops[callback](delta);\n        this.monitoringEnd(callback);\n      }\n      this.monitoringEnd(FrameLoop.name);\n    };\n    requestAnimationFrame(animate);\n  }\n\n  setMonitoringCallback(start: (name) => void, end: (name) => void) {\n    this.monitoringStart = start;\n    this.monitoringEnd = end;\n  }\n\n  removeLoop(loopName: string) {\n    delete this.loops[loopName];\n    this.monitoringStart(loopName); //set this loop to 0 fix\n    this.monitoringEnd(loopName);\n  }\n\n  addLoop(loopName: string, iterationCallback: (delta: number) => void) {\n    if (this.loops[loopName]) {\n      throw new Error();\n    }\n    this.loops[loopName] = iterationCallback;\n  }\n\n  getType(): string {\n    return FrameLoop.name;\n  }\n}\n","import { WebpackLazyModule } from \"@root/lib/modules/core/loader/WebpackLoader\";\nimport {\n  LazyServices,\n  Service,\n} from \"@root/lib/modules/core/service/LazyServices\";\nimport Component from \"@root/lib/modules/core/ecs/Component\";\nimport { WorldEntity } from \"@root/lib/modules/core/ecs/WorldEntity\";\nimport { ServiceEntity } from \"@root/lib/modules/core/service/ServiceEntity\";\nimport { CodeLoaderComponent } from \"@root/lib/modules/core/loader/CodeLoaderComponent\";\nimport { getGlobalStorage } from \"@root/lib/modules/core/loader/global\";\n\nexport class Factory implements WebpackLazyModule, Service<WorldService> {\n  constructor() {}\n\n  async createService(services: LazyServices): Promise<WorldService> {\n    return new WorldService(services);\n  }\n}\n\nlet addOnWorldChangeCallback: (() => void)[] = []; //do not use events emitter here to avoid surcharing dependencies in the code modules\nlet addOnWorldAddedCallback: (() => void)[] = []; //do not use events emitter here to avoid surcharing dependencies in the code modules\ninterface Worlds {\n  world: WorldEntity;\n  activeWorld: number;\n  worlds: WorldEntity[];\n}\n\nif (!getGlobalStorage<Worlds>(\"worlds\").activeWorld) {\n  //initialize world service\n  getGlobalStorage<Worlds>(\"worlds\").worlds = [];\n  getGlobalStorage<Worlds>(\"worlds\").activeWorld = -1;\n}\n\nexport function registerNewWorld(worldEntity: WorldEntity) {\n  getGlobalStorage<Worlds>(\"worlds\").worlds.push(worldEntity);\n  if (getGlobalStorage<Worlds>(\"worlds\").activeWorld < 0) {\n    getGlobalStorage<Worlds>(\"worlds\").activeWorld = 0;\n    getGlobalStorage<Worlds>(\"worlds\").world =\n      getGlobalStorage<Worlds>(\"worlds\").worlds[\n        getGlobalStorage<Worlds>(\"worlds\").activeWorld\n      ];\n  }\n}\n\nexport class WorldService implements Component {\n  private world: WorldEntity;\n\n  constructor(services: LazyServices) {\n    console.log(\"info\");\n    let worldtmp: any = null;\n    for (const world of this.getWorlds()) {\n      let serviceEntity = world.getFirstComponentByType<ServiceEntity>(\n        ServiceEntity.name\n      );\n      if (serviceEntity == services) {\n        worldtmp = world;\n      }\n    }\n    if (!worldtmp) {\n      throw new Error();\n    }\n    this.world = worldtmp;\n\n    //new world service is new world event\n    services\n      .getService<CodeLoaderComponent>(\n        \"@aptero/axolotis-player/modules/core/loader/CodeLoaderService\"\n      )\n      .then(async (codeLoader) => {\n        codeLoader.awaitInitialLoading();\n        for (const callback of addOnWorldAddedCallback) {\n          callback();\n        }\n      });\n\n    if (getGlobalStorage<Worlds>(\"worlds\").activeWorld >= 0) {\n      this.setActiveWorldByNumber(\n        getGlobalStorage<Worlds>(\"worlds\").activeWorld\n      );\n    }\n  }\n\n  getType(): string {\n    return WorldService.name;\n  }\n\n  getWorlds() {\n    return getGlobalStorage<Worlds>(\"worlds\").worlds;\n  }\n\n  getActiveWorld() {\n    return this.getWorlds()[getGlobalStorage<Worlds>(\"worlds\").activeWorld];\n  }\n\n  isActiveWorld() {\n    return this.world == this.getActiveWorld();\n  }\n\n  addOnWorldChangeCallback(callback: () => void, init: boolean = false) {\n    addOnWorldChangeCallback.push(callback);\n    if (init) {\n      callback();\n    }\n  }\n\n  addOnWorldAdded(callback: () => void, init: boolean = false) {\n    addOnWorldAddedCallback.push(callback);\n    if (init) {\n      callback();\n    }\n  }\n\n  setActiveWorld(world: WorldEntity) {\n    for (let i = 0; i < this.getWorlds().length; i++) {\n      if (world == this.getWorlds()[i]) {\n        this.setActiveWorldByNumber(i);\n        return;\n      }\n    }\n    throw new Error();\n  }\n\n  setActiveWorldByNumber(number: number) {\n    if (getGlobalStorage<Worlds>(\"worlds\").activeWorld != number) {\n      getGlobalStorage<Worlds>(\"worlds\").activeWorld = number;\n      getGlobalStorage<Worlds>(\"worlds\").world = this.getWorlds()[number];\n      for (const callback of addOnWorldChangeCallback) {\n        callback();\n      }\n    }\n  }\n}\n","import { ComponentFactory } from \"@root/lib/modules/core/ecs/ComponentFactory\";\nimport Component from \"@root/lib/modules/core/ecs/Component\";\nimport { instanciateLocalAsyncModule } from \"@root/lib/modules/core/loader/LocalLoader\";\nimport { loadModules } from \"@root/lib/generated/webpack/module/WebpackLoader\";\nimport { getGlobalStorage } from \"@root/lib/modules/core/loader/global\";\n\nexport type Module = () => Promise<{ module: any; classname: string }>;\nexport interface LocalModules {\n  [id: string]: Module;\n}\n\nexport function registerLocalModule(name: string, module: Module) {\n  if (getGlobalStorage<LocalModules>(\"localModules\")[name]) {\n    throw new Error(\"Module already defined\");\n  }\n  getGlobalStorage<LocalModules>(\"localModules\")[name] = module;\n}\n\nexport function registerLocalModuleList(\n  localModulesList: LocalModules,\n  verbose: boolean = false\n) {\n  if (verbose) {\n    console.log(\"imported module :\", localModulesList);\n  }\n  Object.assign(\n    getGlobalStorage<LocalModules>(\"localModules\"),\n    localModulesList\n  );\n}\n\nregisterLocalModuleList(loadModules());\n\nexport async function instanciateJsAsyncModule<T>(\n  moduleName: string\n): Promise<T> {\n  let module = null;\n  if (getGlobalStorage<LocalModules>(\"localModules\")[moduleName]) {\n    module = await instanciateLocalAsyncModule<ComponentFactory<Component>>(\n      moduleName,\n      getGlobalStorage<LocalModules>(\"localModules\")\n    );\n  } else {\n    //TODO remote module \"https://\"\n    console.log(\n      \"local module installed:\",\n      getGlobalStorage<LocalModules>(\"localModules\")\n    );\n    throw new Error(\"unknown module - please register it - \" + moduleName);\n  }\n  return module;\n}\n","import { LocalModules } from \"@root/lib/modules/core/loader/JsLoader\";\n\nexport async function instanciateLocalAsyncModule<T>(\n  fqcn: string,\n  localModules: LocalModules = {}\n): Promise<T> {\n  const localModule = await localModules[fqcn]();\n  const module = localModule.module;\n  for (const key in module) {\n    const sub = module[key];\n    if (\n      sub.prototype &&\n      sub.prototype.constructor.name === localModule.classname\n    ) {\n      //identifiying the module\n      return new sub();\n    }\n  }\n  throw new Error(\"invalid factory \" + fqcn + \" - \" + localModule.classname);\n}\n","\nexport function loadModules(): { [id: string]: () => Promise<{module:any,classname:string}>} {\n  let ret = {};\n  //Autogenerated\n  /* Webpack use module name for loading and computing code bundle and split chunk so we cannot introduce variable in the import thus we create this redirecting file*/\n  \n  ret[\"@aptero/axolotis-player/modules/core/WorldService\"] = async () => {\n    const module = await import(\"@root/lib/modules/core/WorldService\");\n    return {module, classname: module.Factory.name}\n  };\n  ret[\"@aptero/axolotis-player/modules/FrameLoop\"] = async () => {\n    const module = await import(\"@root/lib/modules/FrameLoop\");\n    return {module, classname: module.Factory.name}\n  };\n  return ret;\n}\n","declare const window: any;\n\nif (window) {\n  if (!window.axolotis) {\n    window.axolotis = {};\n  }\n}\nvar axolotis = window.axolotis;\n\nexport function getGlobalStorage<T>(key): T {\n  if (!axolotis[key]) {\n    axolotis[key] = {};\n  }\n  return axolotis[key] as T;\n}\n","import Component from \"@root/lib/modules/core/ecs/Component\";\nimport { instanciateJsAsyncModule } from \"@root/lib/modules/core/loader/JsLoader\";\n\nexport interface Service<T> {\n  createService(services: LazyServices): Promise<T>;\n}\n\nexport class LazyServices {\n  service: { [id: string]: Promise<Component> | undefined } = {};\n\n  setService(path: string, service: Component, classname: string = \"Factory\") {\n    this.service[path] = Promise.resolve(service);\n  }\n\n  async getService<T extends Component>(path: string): Promise<T> {\n    if (this.service[path]) {\n      const module = await this.service[path];\n      if (!module) {\n        throw new Error(\"error\");\n      }\n      return module as T;\n    }\n    if (!this.service[path]) {\n      let modulePromise = instanciateJsAsyncModule<Service<T>>(path);\n      this.service[path] = new Promise(async (resolve) => {\n        let t: Component = await (await modulePromise).createService(this);\n        resolve(t);\n      });\n    }\n    return (await this.service[path]) as T;\n  }\n}\n","import Component from \"@root/lib/modules/core/ecs/Component\";\nimport { LazyServices } from \"@root/lib/modules/core/service/LazyServices\";\n\nexport class ServiceEntity extends LazyServices implements Component {\n  getType(): string {\n    return ServiceEntity.name;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Component from \"@root/lib/modules/core/ecs/Component\";\nimport { load } from \"@root/lib/modules/core/loader/CodeLoader\";\nimport { ComponentFactory } from \"@root/lib/modules/core/ecs/ComponentFactory\";\nimport { WorldEntity } from \"@root/lib/modules/core/ecs/WorldEntity\";\nimport { ServiceEntity } from \"@root/lib/modules/core/service/ServiceEntity\";\nimport { instanciateJsAsyncModule } from \"@root/lib/modules/core/loader/JsLoader\";\n\nexport class CodeLoaderComponent implements Component {\n  private initialLoading: Promise<any>;\n  private initialLoadingResolver: ((value: any) => void) | undefined;\n\n  constructor() {\n    this.initialLoading = new Promise<any>((resolve) => {\n      this.initialLoadingResolver = resolve;\n    });\n  }\n\n  getType(): string {\n    return CodeLoaderComponent.name;\n  }\n\n  async awaitInitialLoading() {\n    await this.initialLoading;\n  }\n\n  async startLoadingJson(\n    world: WorldEntity,\n    scene: {\n      version: string;\n      entities: {\n        components: {\n          module: string;\n          config: any;\n          classname: string | undefined;\n        }[];\n      }[];\n      services: { module: string }[];\n    },\n    loadedCallBack: (progress: number, total: number) => void\n  ) {\n    let promises: (() => Promise<any>)[] = [];\n    for (const entity of scene.entities) {\n      for (const componentDef of entity.components) {\n        let config = componentDef.config;\n        promises.push(\n          () =>\n            new Promise(async (resolve, reject) => {\n              const module = await instanciateJsAsyncModule<\n                ComponentFactory<Component>\n              >(componentDef.module);\n              let component = await module.createComponent(world, config || {});\n              if (!component.getType) {\n                throw new Error(\n                  \"Not a component : \" +\n                    componentDef.module +\n                    \" \" +\n                    component.constructor.name\n                );\n              }\n              world.addComponent(component); //TODO world default but should ad to an entity\n              resolve(module);\n            })\n        );\n      }\n    }\n\n    for (const serviceDef of scene.services) {\n      promises.push(\n        () =>\n          new Promise(async (resolve, reject) => {\n            let service = await world.getFirstComponentByType<ServiceEntity>(\n              ServiceEntity.name\n            );\n            await service.getService<any>(serviceDef.module);\n            resolve(service);\n          })\n      );\n    }\n\n    let promise = load(promises, loadedCallBack);\n    promise.then((value) => {\n      if (this.initialLoadingResolver !== undefined) {\n        this.initialLoadingResolver(value);\n      }\n    });\n    promise.catch((reason) => {\n      console.error(reason);\n    });\n    return promise;\n  }\n}\n","export function load(\n  modules: (() => Promise<any>)[],\n  loadedCallBack: (progress: number, total: number) => void\n) {\n  let ret: any[] = [];\n  let nbLoaded = 0;\n  for (const promiseCb of modules) {\n    const promise = promiseCb(); //trigger the load\n    ret.push(promise);\n    promise.then(() => {\n      nbLoaded++;\n      loadedCallBack(nbLoaded, modules.length);\n    });\n  }\n  return Promise.all(ret);\n}\n","import { DestroyableComponent } from \"./DestroyableComponent\";\nimport { Component } from \"./Component\";\n\nexport class Entity implements Component {\n  private components: Component[] = [];\n  private waitingForComponent: { [id: string]: any[] } = {};\n\n  constructor(private name: string) {}\n\n  public addComponent<T extends Component>(component: T): T {\n    this.components.push(component);\n\n    //part for async getComponent\n    if (this.waitingForComponent[component.getType()]) {\n      for (const elem of this.waitingForComponent[component.getType()]) {\n        elem(component);\n      }\n      delete this.waitingForComponent[component.getType()];\n    }\n\n    return component;\n  }\n\n  public removeAllComponents() {\n    this.components.forEach((comp) => {\n      this.removeComponent(comp);\n    });\n  }\n\n  public removeComponent<T extends Component>(component: T): T {\n    if (\"destroy\" in component) {\n      (component as any as DestroyableComponent).destroy();\n    }\n    this.components = this.components.filter((comp) => {\n      return comp != component;\n    });\n    return component;\n  }\n\n  public addComponents(components: Component[]) {\n    components.forEach((comp) => {\n      this.addComponent(comp);\n    });\n  }\n\n  public getComponents(): Component[] {\n    return this.components;\n  }\n\n  public getComponentByType<T extends Component>(type: string): T[] {\n    let ret: T[] = [];\n    this.components.forEach((comp) => {\n      if (comp.getType() === type) {\n        ret.push(comp as T);\n      }\n    });\n    return ret;\n  }\n\n  public getComponentByTypeStartsWith(type: string): Component[] {\n    let ret: Component[] = [];\n    this.components.forEach((comp) => {\n      if (comp.getType().startsWith(type)) {\n        ret.push(comp);\n      }\n    });\n    return ret;\n  }\n\n  public getFirstComponentByTypeStartsWith<T extends Component>(\n    type: string\n  ): T {\n    return this.getComponentByTypeStartsWith(type)[0] as T;\n  }\n\n  public getFirstComponentByType<T extends Component>(type: string): T {\n    return this.getComponentByType(type)[0] as T;\n  }\n\n  public async getFirstComponentByTypeAsync<T extends Component>(\n    type: string\n  ): Promise<T> {\n    if (this.getComponentByType(type)[0]) {\n      return this.getComponentByType(type)[0] as T;\n    } else {\n      if (!this.waitingForComponent[type]) {\n        this.waitingForComponent[type] = [];\n      }\n      let promise = new Promise<T>((resolve, reject) => {\n        this.waitingForComponent[type].push(resolve); //will resolve later\n      });\n      return promise;\n    }\n  }\n\n  public getType(): string {\n    return this.name;\n  }\n}\n\nexport default Entity;\n","import Entity from \"@root/lib/modules/core/ecs/Entity\";\nimport { registerNewWorld } from \"@root/lib/modules/core/WorldService\";\n\nexport class WorldEntity extends Entity {\n  constructor() {\n    super(\"world\");\n    registerNewWorld(this);\n  }\n}\n","import { CodeLoaderComponent } from \"@root/lib/modules/core/loader/CodeLoaderComponent\";\nimport { ServiceEntity } from \"@root/lib/modules/core/service/ServiceEntity\";\nimport { WorldEntity } from \"@root/lib/modules/core/ecs/WorldEntity\";\n\nexport const BUILD_VERSION = require(\"../../../../../package.json\").version;\nconsole.log(BUILD_VERSION);\n\nconst domReady = (callBack: () => void) => {\n  if (document.readyState === \"loading\") {\n    document.addEventListener(\"DOMContentLoaded\", callBack);\n  } else {\n    callBack();\n  }\n};\n\nconst windowReady = (callBack: () => void) => {\n  if (document.readyState === \"complete\" && document.body) {\n    callBack();\n  } else {\n    window.addEventListener(\"DOMContentLoaded\", callBack);\n  }\n};\n\nexport async function initHtmlFromUrl(\n  url: string,\n  config: {\n    onProgress?: (progress: number, total: number) => void;\n    onLoaded?: () => void;\n  } = {}\n): Promise<WorldEntity> {\n  if (!config.onProgress) {\n    config.onProgress = (progress: number, total: number) => {\n      console.log(\"[\" + url + \"] : [\" + progress + \"/\" + total + \"]\");\n    };\n  }\n  if (!config.onLoaded) {\n    config.onLoaded = () => {\n      console.log(\"[\" + url + \"] : loading complete\");\n    };\n  }\n  let serviceEntity = new ServiceEntity();\n  let world = new WorldEntity();\n  world.addComponent(serviceEntity);\n  let codeLoaderComponent = new CodeLoaderComponent();\n  serviceEntity.setService(\n    \"@aptero/axolotis-player/modules/core/loader/CodeLoaderService\",\n    codeLoaderComponent\n  );\n  const r = await fetch(url);\n  const html = await r.text();\n  const parser = new DOMParser();\n  const document = parser.parseFromString(html, \"text/html\");\n  let scene: HTMLCollection = document.body.getElementsByTagName(\"ax-scene\"); //TODO assume only one scene\n  if (!scene || (scene && scene.length == 0)) {\n    console.warn(\"Axolotis scene not found (no tag ax-scene)\");\n    config.onLoaded();\n    return;\n  }\n  console.log(scene);\n  await codeLoaderComponent.startLoadingJson(\n    world,\n    htmlToJson(scene),\n    config.onProgress\n  );\n  config.onLoaded();\n  return world;\n}\n\nexport function initHtml(\n  config: {\n    onProgress?: (progress: number, total: number) => void;\n    onLoaded?: () => void;\n  } = {}\n): WorldEntity {\n  if (!config.onProgress) {\n    config.onProgress = (progress: number, total: number) => {\n      console.log(\"[\" + progress + \"/\" + total + \"]\");\n    };\n  }\n  if (!config.onLoaded) {\n    config.onLoaded = () => {\n      console.log(\"loading complete\");\n    };\n  }\n  let serviceEntity = new ServiceEntity();\n  let world = new WorldEntity();\n  world.addComponent(serviceEntity);\n  let codeLoaderComponent = new CodeLoaderComponent();\n  serviceEntity.setService(\n    \"@aptero/axolotis-player/modules/core/loader/CodeLoaderService\",\n    codeLoaderComponent\n  );\n  windowReady(() => {\n    let scene: HTMLCollection =\n      window.document.body.getElementsByTagName(\"ax-scene\"); //TODO assume only one scene\n    if (!scene || (scene && scene.length == 0)) {\n      console.warn(\"Axolotis scene not found (no tag ax-scene)\");\n      config.onLoaded();\n      return;\n    }\n    console.log(scene);\n    codeLoaderComponent\n      .startLoadingJson(world, htmlToJson(scene), config.onProgress)\n      .then(config.onLoaded);\n  });\n  return world;\n}\n\nfunction htmlToJson(scene: HTMLCollection): {\n  version: string;\n  entities: {\n    components: {\n      module: string;\n      config: any;\n      classname: string | undefined;\n    }[];\n  }[];\n  services: { module: string }[];\n} {\n  let sceneEl = scene[0];\n  const ret = {\n    version: \"2.0\",\n    entities: [],\n    services: [],\n  };\n  // @ts-ignore\n  for (const entity of sceneEl.getElementsByTagName(\"ax-entity\")) {\n    //§§§ ICI sdhdfhdfshdf\n    let entityRet = { components: [] };\n\n    for (const componentEl of entity.getElementsByTagName(\"ax-component\")) {\n      //convert relaxed json to proper json\n      let correctJson = componentEl\n        .getAttribute(\"config\")\n        .replace(/(['\"])?([a-z0-9A-Z_]+)(['\"])?:/g, '\"$2\": ');\n      let component = {\n        module: componentEl.getAttribute(\"module\"),\n        config: JSON.parse(correctJson),\n      };\n      entityRet.components.push(component);\n    }\n    ret.entities.push(entityRet);\n  }\n  // @ts-ignore\n  for (const service of sceneEl.getElementsByTagName(\"ax-service\")) {\n    ret.services.push({ module: service.getAttribute(\"module\") });\n  }\n  return ret;\n}\n"],"names":["root","factory","exports","module","define","amd","self","Factory","services","codeLoader","getService","FrameLoop","awaitInitialLoading","then","startAnimationFrameLoop","constructor","animate","t","this","monitoringStart","name","delta","prevTime","requestAnimationFrame","callback","loops","monitoringEnd","setMonitoringCallback","start","end","removeLoop","loopName","addLoop","iterationCallback","Error","getType","WorldService","addOnWorldChangeCallback","addOnWorldAddedCallback","registerNewWorld","worldEntity","getGlobalStorage","worlds","push","activeWorld","world","console","log","worldtmp","getWorlds","getFirstComponentByType","ServiceEntity","async","setActiveWorldByNumber","getActiveWorld","isActiveWorld","init","addOnWorldAdded","setActiveWorld","i","length","number","registerLocalModule","registerLocalModuleList","localModulesList","verbose","Object","assign","instanciateJsAsyncModule","moduleName","fqcn","localModules","localModule","key","sub","prototype","classname","instanciateLocalAsyncModule","ret","loadModules","window","axolotis","LazyServices","setService","path","service","Promise","resolve","modulePromise","createService","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","o","defineProperty","enumerable","get","obj","prop","hasOwnProperty","call","r","Symbol","toStringTag","value","CodeLoaderComponent","initialLoading","initialLoadingResolver","scene","loadedCallBack","promises","entity","entities","componentDef","components","config","reject","component","createComponent","addComponent","serviceDef","promise","modules","nbLoaded","promiseCb","all","load","catch","reason","error","waitingForComponent","elem","removeAllComponents","forEach","comp","removeComponent","destroy","filter","addComponents","getComponents","getComponentByType","type","getComponentByTypeStartsWith","startsWith","getFirstComponentByTypeStartsWith","WorldEntity","Entity","super","BUILD_VERSION","require","windowReady","callBack","document","readyState","body","addEventListener","initHtmlFromUrl","url","onProgress","progress","total","onLoaded","serviceEntity","codeLoaderComponent","fetch","html","text","parser","DOMParser","parseFromString","getElementsByTagName","warn","startLoadingJson","htmlToJson","initHtml","sceneEl","version","entityRet","componentEl","correctJson","getAttribute","replace","JSON","parse"],"sourceRoot":""}