{"version":3,"file":"index.js","mappings":"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","sources":["webpack://axolotis-player/webpack/universalModuleDefinition","webpack://axolotis-player/webpack/bootstrap","webpack://axolotis-player/webpack/runtime/define property getters","webpack://axolotis-player/webpack/runtime/hasOwnProperty shorthand","webpack://axolotis-player/webpack/runtime/make namespace object","webpack://axolotis-player/./src/lib/modules/core/ecs/Entity.ts","webpack://axolotis-player/./src/lib/modules/core/ecs/WorldEntity.ts","webpack://axolotis-player/./src/lib/modules/core/loader/Global.ts","webpack://axolotis-player/./src/lib/modules/core/loader/LocalLoader.ts","webpack://axolotis-player/./src/lib/modules/core/loader/JsLoader.ts","webpack://axolotis-player/./src/lib/modules/core/loader/InitialComponentLoader.ts","webpack://axolotis-player/./src/lib/modules/core/loader/CodeLoader.ts","webpack://axolotis-player/./src/lib/modules/core/loader/service/LazyServices.ts","webpack://axolotis-player/./src/lib/modules/core/loader/service/Services.ts","webpack://axolotis-player/./src/lib/modules/core/loader/BasicInit.ts","webpack://axolotis-player/./src/lib/modules/core/loader/DomInit.ts","webpack://axolotis-player/./src/lib/modules/core/loader/entity/LazyEntity.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"axolotis-player\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"axolotis-player\"] = factory();\n\telse\n\t\troot[\"axolotis-player\"] = factory();\n})(this, function() {\nreturn ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Component } from \"./Component\";\n\nexport class Entity implements Component {\n  private components: Component[] = [];\n\n  constructor() {}\n\n  public addComponent<T extends Component>(component: T): T {\n    this.components.push(component);\n    return component;\n  }\n\n  public removeAllComponents() {\n    this.components.forEach((comp) => {\n      this.removeComponent(comp);\n    });\n  }\n\n  public removeComponent<T extends Component>(component: T): T {\n    if (\"destroy\" in component) {\n      (component as any).destroy();\n    }\n    this.components = this.components.filter((comp) => {\n      return comp != component;\n    });\n    return component;\n  }\n\n  public addComponents(components: Component[]) {\n    components.forEach((comp) => {\n      this.addComponent(comp);\n    });\n  }\n\n  public getComponents(): Component[] {\n    return this.components;\n  }\n\n  public getComponentByType<T extends Component>(type: string): T[] {\n    let ret: T[] = [];\n    this.components.forEach((comp) => {\n      if (comp.getType() === type) {\n        ret.push(comp as T);\n      }\n    });\n    return ret;\n  }\n\n  public getComponentByTypeStartsWith(type: string): Component[] {\n    let ret: Component[] = [];\n    this.components.forEach((comp) => {\n      if (comp.getType().startsWith(type)) {\n        ret.push(comp);\n      }\n    });\n    return ret;\n  }\n\n  public getFirstComponentByTypeStartsWith<T extends Component>(\n    type: string\n  ): T {\n    return this.getComponentByTypeStartsWith(type)[0] as T;\n  }\n\n  public getFirstComponentByType<T extends Component>(type: string): T {\n    return this.getComponentByType(type)[0] as T;\n  }\n\n  public getType(): string {\n    return Entity.name;\n  }\n}\n\nexport default Entity;\n","import Entity from \"@root/lib/modules/core/ecs/Entity\";\n\nexport class WorldEntity extends Entity {\n  constructor() {\n    super();\n  }\n  public getType(): string {\n    return WorldEntity.name;\n  }\n}\n","var axolotis = null;\n\nexport function getGlobalStorage<T>(key): T {\n  //not axolotis in window => create it\n  if (typeof window !== \"undefined\") {\n    if (!(window as any).axolotis) {\n      (window as any).axolotis = {};\n    }\n  }\n\n  //axolotis var not initialized with window\n  if (!axolotis && typeof window !== \"undefined\") {\n    axolotis = (window as any).axolotis;\n  }\n\n  if (!axolotis) {\n    axolotis = {};\n  }\n\n  if (!axolotis[key]) {\n    axolotis[key] = {};\n  }\n  return axolotis[key] as T;\n}\n","import { getGlobalStorage } from \"@root/lib/modules/core/loader/Global\";\n\nexport type Module = () => Promise<{ module: any; classname: string }>;\nexport interface LocalModules {\n  [id: string]: Module;\n}\n\nexport function registerLocalModule(\n  name: string,\n  module: Module,\n  moduleStorage?: LocalModules\n) {\n  if (!moduleStorage) {\n    moduleStorage = getGlobalStorage<LocalModules>(\"localModules\");\n  }\n  if (moduleStorage[name]) {\n    throw new Error(\"Module already defined\");\n  }\n  moduleStorage[name] = module;\n}\n\nexport function registerLocalModuleList(\n  localModulesList: LocalModules,\n  verbose: boolean = false,\n  moduleStorage?: LocalModules\n) {\n  if (!moduleStorage) {\n    moduleStorage = getGlobalStorage<LocalModules>(\"localModules\");\n  }\n  if (verbose) {\n    console.log(\"imported module :\", localModulesList);\n  }\n  Object.assign(moduleStorage, localModulesList);\n}\n\nexport async function instantiateLocalAsyncModule<T>(\n  fqcn: string,\n  localModules: LocalModules\n): Promise<T> {\n  const localModule = await localModules[fqcn]();\n  const module = localModule.module;\n  for (const key in module) {\n    const sub = module[key];\n    if (\n      sub.prototype &&\n      sub.prototype.constructor.name === localModule.classname\n    ) {\n      //identifiying the module\n      return new sub();\n    }\n  }\n  throw new Error(\"invalid factory \" + fqcn + \" - \" + localModule.classname);\n}\n","import { ComponentFactory } from \"@root/lib/modules/core/ecs/ComponentFactory\";\nimport Component from \"@root/lib/modules/core/ecs/Component\";\nimport {\n  instantiateLocalAsyncModule,\n  LocalModules,\n} from \"@root/lib/modules/core/loader/LocalLoader\";\n\nexport async function instantiateAsyncModule<T>(\n  moduleName: string,\n  moduleStorage: LocalModules\n): Promise<T> {\n  let module = null;\n  if (moduleStorage && moduleStorage[moduleName]) {\n    module = await instantiateLocalAsyncModule<ComponentFactory<Component>>(\n      moduleName,\n      moduleStorage\n    );\n  } else if (moduleName.startsWith(\"http\")) {\n    //TODO remote module \"https://\"\n    throw new Error(\"remote modules not implemented yet\");\n  } else {\n    console.log(\"local module installed:\", moduleStorage);\n    throw new Error(\"unknown module - please register it - \" + moduleName);\n  }\n  return module;\n}\n","import Component from \"@root/lib/modules/core/ecs/Component\";\nimport { load } from \"@root/lib/modules/core/loader/CodeLoader\";\nimport { ComponentFactory } from \"@root/lib/modules/core/ecs/ComponentFactory\";\nimport { WorldEntity } from \"@root/lib/modules/core/ecs/WorldEntity\";\nimport { instantiateAsyncModule } from \"@root/lib/modules/core/loader/JsLoader\";\nimport { WorldDefinition } from \"@root/lib/modules/core/loader/WorldDefinition\";\nimport { LocalModules } from \"@root/lib/modules/core/loader/LocalLoader\";\n\nexport const CODE_LOADER_MODULE_NAME =\n  \"@aptero/axolotis-player/core/loader/InitialComponentLoader\";\n\nexport class InitialComponentLoader implements Component {\n  private initialLoading: Promise<any>;\n  private initialLoadingResolver: ((value: any) => void) | undefined;\n  private moduleStorage: LocalModules;\n\n  constructor() {\n    this.initialLoading = new Promise<any>((resolve) => {\n      this.initialLoadingResolver = resolve;\n    });\n  }\n\n  getType(): string {\n    return InitialComponentLoader.name;\n  }\n\n  getModuleStorage() {\n    return this.moduleStorage;\n  }\n\n  async awaitInitialLoading() {\n    await this.initialLoading;\n  }\n\n  async startLoading(\n    world: WorldEntity,\n    scene: WorldDefinition,\n    loadedCallBack: (progress: number, total: number) => void,\n    moduleStorage: LocalModules\n  ) {\n    this.moduleStorage = moduleStorage;\n    if (scene.version !== \"2.0\") {\n      throw new Error(\"unsupported\");\n    }\n    let promises: (() => Promise<any>)[] = [];\n    for (const entity of scene.entities) {\n      for (const componentDef of entity.components) {\n        let config = componentDef.config;\n        promises.push(\n          () =>\n            new Promise(async (resolve, reject) => {\n              const module = await instantiateAsyncModule<\n                ComponentFactory<Component>\n              >(componentDef.module, moduleStorage);\n              let component = await module.createComponent(world, config || {});\n              if (!component.getType) {\n                throw new Error(\n                  \"Not a component : \" +\n                    componentDef.module +\n                    \" \" +\n                    component.constructor.name\n                );\n              }\n              world.addComponent(component); //TODO world default but should ad to an entity\n              resolve(module);\n            })\n        );\n      }\n    }\n\n    let promise = load(promises, loadedCallBack);\n    promise.then((value) => {\n      if (this.initialLoadingResolver !== undefined) {\n        this.initialLoadingResolver(value);\n      }\n    });\n    promise.catch((reason) => {\n      console.error(reason);\n    });\n    return promise;\n  }\n}\n","export function load(\n  modules: (() => Promise<any>)[],\n  loadedCallBack: (progress: number, total: number) => void\n) {\n  let ret: any[] = [];\n  let nbLoaded = 0;\n  for (const promiseCb of modules) {\n    const promise = promiseCb(); //trigger the load\n    ret.push(promise);\n    promise.then(() => {\n      nbLoaded++;\n      loadedCallBack(nbLoaded, modules.length);\n    });\n  }\n  return Promise.all(ret);\n}\n","import Component from \"@root/lib/modules/core/ecs/Component\";\nimport { instantiateAsyncModule } from \"@root/lib/modules/core/loader/JsLoader\";\nimport { Service } from \"@root/lib/modules/core/loader/service/Service\";\nimport { WorldEntity } from \"@root/lib\";\nimport {\n  InitialComponentLoader,\n  CODE_LOADER_MODULE_NAME,\n} from \"@root/lib/modules/core/loader/InitialComponentLoader\";\nimport { IServices } from \"./IServices\";\n\nexport class LazyServices implements IServices {\n  constructor(private world: WorldEntity) {}\n\n  service: { [id: string]: Promise<Component> | undefined } = {};\n\n  getWorld(): WorldEntity {\n    return this.world;\n  }\n\n  setService(\n    moduleName: string,\n    service: Component,\n    classname: string = \"Factory\"\n  ) {\n    this.service[moduleName] = Promise.resolve(service);\n  }\n\n  async getService<T extends Component>(moduleName: string): Promise<T> {\n    if (this.service[moduleName]) {\n      const module = await this.service[moduleName];\n      if (!module) {\n        throw new Error(\"error\");\n      }\n      return module as T;\n    }\n    if (!this.service[moduleName]) {\n      let modulesList = (\n        (await this.service[CODE_LOADER_MODULE_NAME]) as InitialComponentLoader\n      ).getModuleStorage();\n      let modulePromise = instantiateAsyncModule<Service<T>>(\n        moduleName,\n        modulesList\n      );\n      this.service[moduleName] = new Promise(async (resolve) => {\n        let t: Component = await (await modulePromise).createService(this);\n        resolve(t);\n      });\n    }\n    return (await this.service[moduleName]) as T;\n  }\n}\n","import Component from \"@root/lib/modules/core/ecs/Component\";\nimport { LazyServices } from \"@root/lib/modules/core/loader/service/LazyServices\";\n\nexport class Services extends LazyServices implements Component {\n  getType(): string {\n    return Services.name;\n  }\n}\n","import { Services } from \"@root/lib/modules/core/loader/service/Services\";\nimport { WorldEntity } from \"@root/lib\";\nimport {\n  InitialComponentLoader,\n  CODE_LOADER_MODULE_NAME,\n} from \"@root/lib/modules/core/loader/InitialComponentLoader\";\nimport { getGlobalStorage } from \"@root/lib/modules/core/loader/Global\";\nimport { LocalModules } from \"@root/lib/modules/core/loader/LocalLoader\";\nimport { WorldDefinition } from \"@root/lib/modules/core/loader/WorldDefinition\";\n\nexport async function createWorld(\n  initialScene: WorldDefinition = {\n    version: \"2.0\",\n    entities: [],\n  },\n  loadedCallBack: (progress: number, total: number) => void = () => {},\n  moduleStorage?: LocalModules,\n  world?: WorldEntity\n) {\n  if (!world) {\n    world = new WorldEntity();\n  }\n  if (!moduleStorage) {\n    moduleStorage = getGlobalStorage<LocalModules>(\"localModules\");\n  }\n  let serviceEntity = new Services(world);\n  world.addComponent(serviceEntity);\n  let codeLoaderComponent = new InitialComponentLoader();\n  serviceEntity.setService(CODE_LOADER_MODULE_NAME, codeLoaderComponent);\n  await codeLoaderComponent.startLoading(\n    world,\n    initialScene,\n    loadedCallBack,\n    moduleStorage\n  );\n  return world;\n}\n","import { WorldEntity } from \"@root/lib/modules/core/ecs/WorldEntity\";\nimport { createWorld } from \"@root/lib/modules/core/loader/BasicInit\";\nimport {\n  WorldDefinition,\n  WorldDefinitionV2,\n} from \"@root/lib/modules/core/loader/WorldDefinition\";\n\nexport const BUILD_VERSION = require(\"../../../../../package.json\").version;\nconsole.log(\"Axolotis-player version :\" + BUILD_VERSION);\n\nconst windowReady = (callBack: () => void) => {\n  if (document.readyState === \"complete\" && document.body) {\n    callBack();\n  } else {\n    window.addEventListener(\"DOMContentLoaded\", callBack);\n  }\n};\n\nexport async function initHtmlFromUrl(\n  url: string,\n  config: {\n    onProgress?: (progress: number, total: number) => void;\n    onLoaded?: () => void;\n  } = {}\n): Promise<WorldEntity> {\n  if (!config.onProgress) {\n    config.onProgress = (progress: number, total: number) => {\n      console.log(\"[\" + url + \"] : [\" + progress + \"/\" + total + \"]\");\n    };\n  }\n  if (!config.onLoaded) {\n    config.onLoaded = () => {\n      console.log(\"[\" + url + \"] : loading complete\");\n    };\n  }\n  const r = await fetch(url);\n  const html = await r.text();\n  const parser = new DOMParser();\n  const document = parser.parseFromString(html, \"text/html\");\n  let scene: HTMLCollection = document.body.getElementsByTagName(\"ax-scene\"); //TODO assume only one scene\n  if (!scene || (scene && scene.length == 0)) {\n    console.warn(\"Axolotis scene not found (no tag ax-scene)\");\n    config.onLoaded();\n    return;\n  }\n  console.log(scene);\n  const world = await createWorld(htmlToJson(scene), config.onProgress);\n  config.onLoaded();\n  return world;\n}\n\nexport function initHtml(\n  config: {\n    onProgress?: (progress: number, total: number) => void;\n    onLoaded?: (world: WorldEntity) => void;\n  } = {}\n) {\n  if (!config.onProgress) {\n    config.onProgress = (progress: number, total: number) => {\n      console.log(\"[\" + progress + \"/\" + total + \"]\");\n    };\n  }\n  if (!config.onLoaded) {\n    config.onLoaded = (world: WorldEntity) => {\n      console.log(\"loading complete\");\n    };\n  }\n  windowReady(() => {\n    let scene: HTMLCollection =\n      window.document.body.getElementsByTagName(\"ax-scene\"); //TODO assume only one scene\n    if (!scene || (scene && scene.length == 0)) {\n      console.warn(\"Axolotis scene not found (no tag ax-scene)\");\n      createWorld().then(config.onLoaded);\n      return;\n    }\n    console.log(scene);\n    createWorld(htmlToJson(scene), config.onProgress).then(config.onLoaded);\n  });\n}\n\nfunction htmlToJson(scene: HTMLCollection): WorldDefinition {\n  let sceneEl = scene[0];\n  const ret: WorldDefinitionV2 = {\n    version: \"2.0\",\n    entities: [],\n  };\n  // @ts-ignore\n  for (const entity of sceneEl.getElementsByTagName(\"ax-entity\")) {\n    let entityRet = { components: [] };\n\n    for (const componentEl of entity.getElementsByTagName(\"ax-component\")) {\n      let correctJson = JSON.stringify({});\n      if (componentEl.getAttribute(\"config\")) {\n        //convert relaxed json to proper json\n        correctJson = componentEl\n          .getAttribute(\"config\")\n          .replace(/(['\"])?([a-z0-9A-Z_]+)(['\"])?:/g, '\"$2\": ');\n      }\n      let component = {\n        module: componentEl.getAttribute(\"module\"),\n        config: JSON.parse(correctJson),\n      };\n      entityRet.components.push(component);\n    }\n    ret.entities.push(entityRet);\n  }\n  return ret;\n}\n","import Entity from \"@root/lib/modules/core/ecs/Entity\";\nimport { instantiateAsyncModule } from \"@root/lib/modules/core/loader/JsLoader\";\nimport Component from \"@root/lib/modules/core/ecs/Component\";\nimport { ComponentFactory } from \"@root/lib/modules/core/ecs/ComponentFactory\";\nimport {\n  CODE_LOADER_MODULE_NAME,\n  InitialComponentLoader,\n  Services,\n  WorldEntity,\n} from \"@root/lib\";\n\nexport class LazyEntity extends Entity {\n  constructor(private world: WorldEntity) {\n    super();\n  }\n\n  async addComponentAsync<T extends Component>(\n    moduleName: string,\n    config: any = {}\n  ): Promise<T> {\n    let services = this.world.getFirstComponentByType<Services>(Services.name);\n    let codeLoader = await services.getService<InitialComponentLoader>(\n      CODE_LOADER_MODULE_NAME\n    );\n    let modulePromise = instantiateAsyncModule<ComponentFactory<T>>(\n      moduleName,\n      codeLoader.getModuleStorage()\n    );\n    let comp: Component = await (\n      await modulePromise\n    ).createComponent(this.world, config);\n    return comp as T;\n  }\n\n  public getType(): string {\n    return LazyEntity.name;\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","Entity","constructor","addComponent","component","components","push","removeAllComponents","forEach","comp","removeComponent","destroy","filter","addComponents","getComponents","getComponentByType","type","ret","getType","getComponentByTypeStartsWith","startsWith","getFirstComponentByTypeStartsWith","getFirstComponentByType","name","WorldEntity","super","axolotis","getGlobalStorage","window","registerLocalModule","moduleStorage","Error","registerLocalModuleList","localModulesList","verbose","console","log","assign","async","instantiateLocalAsyncModule","fqcn","localModules","localModule","sub","classname","instantiateAsyncModule","moduleName","CODE_LOADER_MODULE_NAME","InitialComponentLoader","initialLoading","Promise","resolve","initialLoadingResolver","getModuleStorage","world","scene","loadedCallBack","version","promises","entity","entities","componentDef","config","reject","createComponent","promise","modules","nbLoaded","promiseCb","then","length","all","load","catch","reason","error","LazyServices","getWorld","setService","service","modulePromise","createService","Services","createWorld","initialScene","serviceEntity","codeLoaderComponent","startLoading","BUILD_VERSION","require","windowReady","callBack","document","readyState","body","addEventListener","initHtmlFromUrl","url","onProgress","progress","total","onLoaded","fetch","html","text","parser","DOMParser","parseFromString","getElementsByTagName","warn","htmlToJson","initHtml","sceneEl","entityRet","componentEl","correctJson","JSON","stringify","getAttribute","replace","parse","LazyEntity","services","getService"],"sourceRoot":""}