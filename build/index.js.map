{"version":3,"file":"index.js","mappings":"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","sources":["webpack://axolotis-player/webpack/universalModuleDefinition","webpack://axolotis-player/webpack/bootstrap","webpack://axolotis-player/webpack/runtime/define property getters","webpack://axolotis-player/webpack/runtime/hasOwnProperty shorthand","webpack://axolotis-player/webpack/runtime/make namespace object","webpack://axolotis-player/./src/lib/modules/core/ecs/Entity.ts","webpack://axolotis-player/./src/lib/modules/core/ecs/WorldEntity.ts","webpack://axolotis-player/./src/lib/modules/core/loader/Global.ts","webpack://axolotis-player/./src/lib/modules/core/loader/LocalLoader.ts","webpack://axolotis-player/./src/lib/modules/core/loader/JsLoader.ts","webpack://axolotis-player/./src/lib/modules/core/loader/InitialComponentLoader.ts","webpack://axolotis-player/./src/lib/modules/core/loader/CodeLoader.ts","webpack://axolotis-player/./src/lib/modules/core/loader/service/LazyServices.ts","webpack://axolotis-player/./src/lib/modules/core/loader/service/Services.ts","webpack://axolotis-player/./src/lib/modules/core/loader/BasicInit.ts","webpack://axolotis-player/./src/lib/modules/core/loader/DomInit.ts","webpack://axolotis-player/./src/lib/modules/core/loader/service/ServiceUtils.ts","webpack://axolotis-player/./src/lib/modules/core/loader/entity/LazyEntity.ts","webpack://axolotis-player/./src/lib/modules/core/loader/Item.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"axolotis-player\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"axolotis-player\"] = factory();\n\telse\n\t\troot[\"axolotis-player\"] = factory();\n})(this, function() {\nreturn ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Component } from \"./Component\";\n\nexport class Entity implements Component {\n  private components: Component[] = [];\n\n  constructor() {}\n\n  public addComponent<T extends Component>(component: T): T {\n    if (component.init) {\n      component.init();\n    }\n    this.components.push(component);\n    return component;\n  }\n\n  public removeAllComponents() {\n    this.components.forEach((comp) => {\n      this.removeComponent(comp);\n    });\n  }\n\n  public removeComponent<T extends Component>(component: T): T {\n    if (component.destroy) {\n      component.destroy();\n    }\n    this.components = this.components.filter((comp) => {\n      return comp != component;\n    });\n    return component;\n  }\n\n  public addComponents(components: Component[]) {\n    components.forEach((comp) => {\n      this.addComponent(comp);\n    });\n  }\n\n  public getComponents(): Component[] {\n    return this.components;\n  }\n\n  public getComponentByType<T extends Component>(type: string): T[] {\n    let ret: T[] = [];\n    this.components.forEach((comp) => {\n      if (comp.getType() === type) {\n        ret.push(comp as T);\n      }\n    });\n    return ret;\n  }\n\n  public getComponentByTypeStartsWith(type: string): Component[] {\n    let ret: Component[] = [];\n    this.components.forEach((comp) => {\n      if (comp.getType().startsWith(type)) {\n        ret.push(comp);\n      }\n    });\n    return ret;\n  }\n\n  public getFirstComponentByTypeStartsWith<T extends Component>(type: string): T {\n    return this.getComponentByTypeStartsWith(type)[0] as T;\n  }\n\n  public getFirstComponentByType<T extends Component>(type: string): T {\n    return this.getComponentByType(type)[0] as T;\n  }\n\n  public getType(): string {\n    return \"Entity\";\n  }\n}\n\nexport default Entity;\n","import Entity from \"@root/lib/modules/core/ecs/Entity\";\n\nexport class WorldEntity extends Entity {\n  constructor() {\n    super();\n  }\n  public getType(): string {\n    return \"WorldEntity\";\n  }\n}\n","var axolotis = null;\n\nexport const GLOBAL_WORLDS_ENTITY = \"worlds\";\nexport const GLOBAL_LOCAL_MODULE = \"localModules\";\n\nexport function getGlobalStorage(): any {\n  //not axolotis in window => create it\n  if (typeof window !== \"undefined\") {\n    if (!(window as any).axolotis) {\n      (window as any).axolotis = {};\n    }\n  }\n\n  //axolotis var not initialized with window\n  if (!axolotis && typeof window !== \"undefined\") {\n    axolotis = (window as any).axolotis;\n  }\n\n  if (!axolotis) {\n    axolotis = {};\n  }\n\n  return axolotis;\n}\n\nexport function setGlobalStorageValue(key, value) {\n  let globalStorage = getGlobalStorage();\n  globalStorage[key] = value;\n}\n\nexport function getGlobalStorageValue<T>(key, auto: boolean = true): T {\n  let globalStorage = getGlobalStorage();\n  if (!globalStorage[key] && auto) {\n    globalStorage[key] = {};\n  }\n  return globalStorage[key] as T;\n}\n","import { getGlobalStorageValue } from \"@root/lib/modules/core/loader/Global\";\nimport Component from \"../ecs/Component\";\nimport { WorldEntity } from \"../ecs/WorldEntity\";\nimport { ComponentName, Services } from \"./service/Services\";\nimport { GLOBAL_LOCAL_MODULE } from \"@root/lib\";\n\nexport type ModulePromise = (() => Promise<LongModule>) | (() => Promise<ShortModule>);\nexport type LongModule = { module: any; classname: string }; //in case there is several export in the file\nexport type ShortModule = { default: { name: string } }; //In this case the js module must be the default export of the class\nexport interface LocalModules {\n  [id: string]: ModulePromise;\n}\n\nexport function registerLocalModule(name: string, module: ModulePromise, moduleStorage?: LocalModules) {\n  if (!moduleStorage) {\n    moduleStorage = getGlobalStorageValue<LocalModules>(GLOBAL_LOCAL_MODULE); //GG name\n  }\n  if (moduleStorage[name]) {\n    throw new Error(\"Module already defined\");\n  }\n  moduleStorage[name] = module;\n}\n\nfunction getClassName(module: any): string {\n  if (module.classname) {\n    //LongModule Case\n    return module.classname;\n  } else if (module.default && module.default.name) {\n    //ShortModule case\n    return module.default.name;\n  } else {\n    console.error(module);\n    throw new Error(\"Malformed module\");\n  }\n}\n\nexport async function instantiateLocalAsyncModule<T>(fqcn: string, localModules: LocalModules, world: WorldEntity, config?: any): Promise<T> {\n  const localModule = await localModules[fqcn]();\n  let module = (localModule as any).module;\n  if (!module) {\n    module = localModule; //SortModule case definition\n  }\n\n  let duplicateCheck = {};\n  let useKeyOnly = false;\n  for (const key in module) {\n    const sub = module[key];\n    if (sub.prototype && sub.prototype.constructor.name) {\n      if (duplicateCheck[sub.prototype.constructor.name]) {\n        useKeyOnly = true;\n        //console.info(\"[axolotis] duplicated constructor module name found (switching to use key only) : \" + sub.prototype.constructor.name);\n      }\n      duplicateCheck[sub.prototype.constructor.name] = true;\n    }\n  }\n\n  for (const key in module) {\n    const sub = module[key];\n    let moduleFound;\n    if (useKeyOnly) {\n      moduleFound = (sub.prototype && sub.prototype.constructor.name === getClassName(localModule)) || key === getClassName(localModule);\n    } else {\n      moduleFound = key === getClassName(localModule);\n    }\n    if (moduleFound) {\n      let DependencyComponentList: Component[] = [];\n      if (sub.dependencies) {\n        for (let i = 0; i < sub.dependencies.length; i++) {\n          const dep = sub.dependencies[i];\n          if (!dep) throw new Error(\"invalid dependencies in:\" + getClassName(localModule));\n          let services = world.getFirstComponentByType<Services>(ComponentName);\n          let service = await services.getService<Component>(dep);\n          DependencyComponentList.push(service);\n        }\n      }\n      if (config != undefined) {\n        return new sub(...DependencyComponentList, config);\n      } else {\n        return new sub(...DependencyComponentList);\n      }\n    }\n  }\n  throw new Error(\"invalid submodule \" + fqcn + \" - \" + getClassName(localModule));\n}\n","import Component from \"@root/lib/modules/core/ecs/Component\";\nimport { instantiateLocalAsyncModule, LocalModules } from \"@root/lib/modules/core/loader/LocalLoader\";\nimport { WorldEntity } from \"../ecs/WorldEntity\";\n\nexport async function instantiateAsyncModule<T>(moduleName: string, moduleStorage: LocalModules, world?: WorldEntity, config?: any): Promise<T> {\n  let module = null;\n  if (moduleStorage && moduleStorage[moduleName]) {\n    module = await instantiateLocalAsyncModule<Component>(moduleName, moduleStorage, world, config);\n  } else if (moduleName.startsWith(\"http\")) {\n    //TODO remote module \"https://\"\n    throw new Error(\"remote modules not implemented yet\");\n  } else {\n    console.log(\"local module installed:\", moduleStorage);\n    throw new Error(\"unknown module - please register it - \" + moduleName);\n  }\n  return module;\n}\n","import Component from \"@root/lib/modules/core/ecs/Component\";\nimport { load } from \"@root/lib/modules/core/loader/CodeLoader\";\nimport { WorldEntity } from \"@root/lib/modules/core/ecs/WorldEntity\";\nimport { instantiateAsyncModule } from \"@root/lib/modules/core/loader/JsLoader\";\nimport { WorldDefinition } from \"@root/lib/modules/core/loader/WorldDefinition\";\nimport { LocalModules } from \"@root/lib/modules/core/loader/LocalLoader\";\n\nexport const CODE_LOADER_MODULE_NAME = \"@aptero/axolotis-player/core/loader/InitialComponentLoader\";\n\nexport class InitialComponentLoader implements Component {\n  private initialLoading: Promise<any>;\n  private initialLoadingResolver: ((value: any) => void) | undefined;\n  private moduleStorage: LocalModules;\n\n  constructor() {\n    this.initialLoading = new Promise<any>((resolve) => {\n      this.initialLoadingResolver = resolve;\n    });\n  }\n\n  getType(): string {\n    return \"InitialComponentLoader\";\n  }\n\n  getModuleStorage() {\n    return this.moduleStorage;\n  }\n\n  async awaitInitialLoading() {\n    await this.initialLoading;\n  }\n\n  async startLoading(world: WorldEntity, scene: WorldDefinition, loadedCallBack: (progress: number, total: number) => void, moduleStorage: LocalModules) {\n    this.moduleStorage = moduleStorage;\n    if (scene.version !== \"2.0\") {\n      throw new Error(\"unsupported\");\n    }\n    let promises: (() => Promise<any>)[] = [];\n    for (const entity of scene.entities) {\n      for (const componentDef of entity.components) {\n        let config = componentDef.config;\n        promises.push(\n          () =>\n            new Promise(async (resolve, reject) => {\n              let module = await instantiateAsyncModule<any>(componentDef.module, moduleStorage, world, config || {}); //module.createComponent(world, config || {});\n              let component = module.getType ? module : ((await module.createComponent(world, config || {})) as Component);\n              if (!component.getType) {\n                throw new Error(\"Not a component : \" + componentDef.module + \" \" + component.constructor.name);\n              }\n              world.addComponent(component); //TODO world default but should ad to an entity\n              resolve(module);\n            })\n        );\n      }\n    }\n\n    let promise = load(promises, loadedCallBack);\n    promise.then((value) => {\n      if (this.initialLoadingResolver !== undefined) {\n        this.initialLoadingResolver(value);\n      }\n    });\n    promise.catch((reason) => {\n      console.error(reason);\n    });\n    return promise;\n  }\n}\n","export function load(modules: (() => Promise<any>)[], loadedCallBack: (progress: number, total: number) => void) {\n  let ret: any[] = [];\n  let nbLoaded = 0;\n  for (const promiseCb of modules) {\n    const promise = promiseCb(); //trigger the load\n    ret.push(promise);\n    promise.then(() => {\n      nbLoaded++;\n      loadedCallBack(nbLoaded, modules.length);\n    });\n  }\n  return Promise.all(ret);\n}\n","import Component from \"@root/lib/modules/core/ecs/Component\";\nimport { instantiateAsyncModule } from \"@root/lib/modules/core/loader/JsLoader\";\nimport { WorldEntity } from \"@root/lib\";\nimport { InitialComponentLoader, CODE_LOADER_MODULE_NAME } from \"@root/lib/modules/core/loader/InitialComponentLoader\";\nimport { IService } from \"@root/lib/modules/core/loader/service/IService\";\n\nexport class LazyServices {\n  constructor(private world: WorldEntity) {}\n\n  serviceAsync: { [id: string]: Promise<IService> | undefined } = {};\n  service: { [id: string]: IService } = {};\n\n  getWorld(): WorldEntity {\n    return this.world;\n  }\n\n  setService(moduleName: string, service: IService, replace = false) {\n    if (!moduleName) throw new Error();\n    if (!replace && (this.serviceAsync[moduleName] || this.service[moduleName])) {\n      throw new Error(\"Service already exist (use replace to force)\");\n    }\n    this.serviceAsync[moduleName] = Promise.resolve(service);\n    this.service[moduleName] = service;\n    if (service.init) {\n      service.init(); //service init\n    }\n  }\n\n  async getService<T extends IService>(moduleName: string): Promise<T> {\n    if (!moduleName) throw new Error();\n    if (!this.serviceAsync[moduleName]) {\n      // it is important to assign value as soon as possible to avoid multiple service creation from rapid getService call.\n      this.serviceAsync[moduleName] = (async () => {\n        let modulesList = ((await this.serviceAsync[CODE_LOADER_MODULE_NAME]) as InitialComponentLoader).getModuleStorage();\n        let modulePromise = instantiateAsyncModule<T>(moduleName, modulesList, this.world);\n        let module: any = await modulePromise;\n        let service: Component = module.getType ? module : await module.createService(this);\n        this.service[moduleName] = service; //module resolved\n        if (service.init) {\n          service.init(); //service init\n        }\n        return service;\n      })();\n    }\n    //service already downloading add this request to queue;\n    const service = await this.serviceAsync[moduleName];\n    if (!service) {\n      throw new Error(\"Internal engine error\");\n    }\n    return service as T;\n  }\n}\n","import Component from \"@root/lib/modules/core/ecs/Component\";\nimport { LazyServices } from \"@root/lib/modules/core/loader/service/LazyServices\";\nimport { IService, IServices } from \"@root/lib\";\n\nexport const ComponentName = \"Services\";\nexport class Services extends LazyServices implements Component, IServices {\n  getType(): string {\n    return ComponentName;\n  }\n\n  getServiceSync<T extends IService>(moduleName: string): T {\n    if (this.service[moduleName]) {\n      return this.service[moduleName] as T;\n    } else {\n      throw new Error(\"service not found : \" + moduleName);\n    }\n  }\n}\n","import { ComponentName, Services } from \"@root/lib/modules/core/loader/service/Services\";\nimport { InitialComponentLoader, CODE_LOADER_MODULE_NAME } from \"@root/lib/modules/core/loader/InitialComponentLoader\";\nimport { getGlobalStorageValue, GLOBAL_LOCAL_MODULE, GLOBAL_WORLDS_ENTITY, setGlobalStorageValue } from \"@root/lib/modules/core/loader/Global\";\nimport { LocalModules } from \"@root/lib/modules/core/loader/LocalLoader\";\nimport { WorldDefinition } from \"@root/lib/modules/core/loader/WorldDefinition\";\nimport { WorldEntity } from \"@root/lib\";\n\nexport function createWorldSync(\n  initialScene: WorldDefinition = {\n    version: \"2.0\",\n    entities: [],\n  },\n  loadedCallBack: (progress: number, total: number) => void = () => {},\n  finished: (world: WorldEntity) => void = () => {},\n  moduleStorage?: LocalModules,\n  world?: WorldEntity\n) {\n  if (!world) {\n    world = new WorldEntity();\n  }\n  if (!getGlobalStorageValue(GLOBAL_WORLDS_ENTITY, false)) {\n    setGlobalStorageValue(GLOBAL_WORLDS_ENTITY, [world]);\n  } else {\n    getGlobalStorageValue<WorldEntity[]>(GLOBAL_WORLDS_ENTITY).push(world);\n  }\n  if (!moduleStorage) {\n    moduleStorage = getGlobalStorageValue<LocalModules>(GLOBAL_LOCAL_MODULE);\n  }\n  let serviceEntity = new Services(world);\n  world.addComponent(serviceEntity);\n\n  let staticServices = {};\n  if (!staticServices[CODE_LOADER_MODULE_NAME]) {\n    staticServices[CODE_LOADER_MODULE_NAME] = new InitialComponentLoader();\n  }\n  for (const key in staticServices) {\n    world.getFirstComponentByType<Services>(ComponentName).setService(key, staticServices[key]);\n  }\n\n  (staticServices[CODE_LOADER_MODULE_NAME] as InitialComponentLoader).startLoading(world, initialScene, loadedCallBack, moduleStorage).then(() => {\n    finished(world);\n  });\n  return world;\n}\n\nexport async function createWorld(\n  initialScene: WorldDefinition = {\n    version: \"2.0\",\n    entities: [],\n  },\n  loadedCallBack: (progress: number, total: number) => void = () => {},\n  moduleStorage?: LocalModules,\n  world?: WorldEntity\n) {\n  return new Promise<WorldEntity>((resolve) => {\n    createWorldSync(initialScene, loadedCallBack, resolve, moduleStorage, world);\n  });\n}\n","import { WorldEntity } from \"@root/lib/modules/core/ecs/WorldEntity\";\nimport { createWorld } from \"@root/lib/modules/core/loader/BasicInit\";\nimport { WorldDefinition, WorldDefinitionV2 } from \"@root/lib/modules/core/loader/WorldDefinition\";\n\nexport const BUILD_VERSION = require(\"../../../../../package.json\").version;\nconsole.log(\"Axolotis-player version :\" + BUILD_VERSION);\n\nconst windowReady = (callBack: () => void) => {\n  if (document.readyState === \"complete\" && document.body) {\n    callBack();\n  } else {\n    window.addEventListener(\"DOMContentLoaded\", callBack);\n  }\n};\n\nexport async function initHtmlFromUrl(\n  url: string,\n  config: {\n    onProgress?: (progress: number, total: number) => void;\n    onLoaded?: () => void;\n  } = {}\n): Promise<WorldEntity> {\n  if (!config.onProgress) {\n    config.onProgress = (progress: number, total: number) => {\n      console.log(\"[\" + url + \"] : [\" + progress + \"/\" + total + \"]\");\n    };\n  }\n  if (!config.onLoaded) {\n    config.onLoaded = () => {\n      console.log(\"[\" + url + \"] : loading complete\");\n    };\n  }\n  const r = await fetch(url);\n  const html = await r.text();\n  const parser = new DOMParser();\n  const document = parser.parseFromString(html, \"text/html\");\n  let scene: HTMLCollection = document.body.getElementsByTagName(\"ax-scene\"); //TODO assume only one scene\n  if (!scene || (scene && scene.length == 0)) {\n    console.warn(\"Axolotis scene not found (no tag ax-scene)\");\n    config.onLoaded();\n    return;\n  }\n  console.log(scene);\n  const world = await createWorld(htmlToJson(scene), config.onProgress);\n  config.onLoaded();\n  return world;\n}\n\nexport function initHtml(\n  config: {\n    onProgress?: (progress: number, total: number) => void;\n    onLoaded?: (world: WorldEntity) => void;\n  } = {}\n) {\n  if (!config.onProgress) {\n    config.onProgress = (progress: number, total: number) => {\n      console.log(\"[\" + progress + \"/\" + total + \"]\");\n    };\n  }\n  if (!config.onLoaded) {\n    config.onLoaded = (world: WorldEntity) => {\n      console.log(\"loading complete\");\n    };\n  }\n  windowReady(() => {\n    let scene: HTMLCollection = window.document.body.getElementsByTagName(\"ax-scene\"); //TODO assume only one scene\n    if (!scene || (scene && scene.length == 0)) {\n      console.warn(\"Axolotis scene not found (no tag ax-scene)\");\n      createWorld().then(config.onLoaded);\n      return;\n    }\n    console.log(scene);\n    createWorld(htmlToJson(scene), config.onProgress).then(config.onLoaded);\n  });\n}\n\nfunction htmlToJson(scene: HTMLCollection): WorldDefinition {\n  let sceneEl = scene[0];\n  const ret: WorldDefinitionV2 = {\n    version: \"2.0\",\n    entities: [],\n  };\n  // @ts-ignore\n  for (const entity of sceneEl.getElementsByTagName(\"ax-entity\")) {\n    let entityRet = { components: [] };\n\n    for (const componentEl of entity.getElementsByTagName(\"ax-component\")) {\n      let correctJson = JSON.stringify({});\n      if (componentEl.getAttribute(\"config\")) {\n        //convert relaxed json to proper json\n        correctJson = componentEl.getAttribute(\"config\").replace(/(['\"])?([a-z0-9A-Z_]+)(['\"])?:/g, '\"$2\": ');\n      }\n      let component = {\n        module: componentEl.getAttribute(\"module\"),\n        config: JSON.parse(correctJson),\n      };\n      entityRet.components.push(component);\n    }\n    ret.entities.push(entityRet);\n  }\n  return ret;\n}\n","import { ComponentName, getGlobalStorageValue, GLOBAL_WORLDS_ENTITY, IService, Services, WorldEntity } from \"@root/lib\";\n\nexport function getGlobalWorld() {\n  let worlds = getGlobalStorageValue<WorldEntity[]>(GLOBAL_WORLDS_ENTITY, false);\n  if (worlds && worlds.length > 0) {\n    return worlds[0];\n  } else {\n    throw new Error(\"No Axolotis world initialized\");\n  }\n}\n\nexport function getServiceSync<T extends IService>(serviceName: string, world: WorldEntity = null): T {\n  if (!world) {\n    world = getGlobalWorld();\n  }\n  return world.getFirstComponentByType<Services>(ComponentName).getServiceSync<T>(serviceName);\n}\n\nexport async function getService<T extends IService>(serviceName: string, world: WorldEntity = null): Promise<T> {\n  if (!world) {\n    world = getGlobalWorld();\n  }\n  return world.getFirstComponentByType<Services>(ComponentName).getService<T>(serviceName);\n}\n","import Entity from \"@root/lib/modules/core/ecs/Entity\";\nimport { instantiateAsyncModule } from \"@root/lib/modules/core/loader/JsLoader\";\nimport Component from \"@root/lib/modules/core/ecs/Component\";\nimport { CODE_LOADER_MODULE_NAME, ComponentName, InitialComponentLoader, Services, WorldEntity } from \"@root/lib\";\n\nexport class LazyEntity extends Entity {\n  constructor(private world: WorldEntity) {\n    super();\n  }\n\n  async addComponentAsync<T extends Component>(moduleName: string, config: any = {}): Promise<T> {\n    let services = this.world.getFirstComponentByType<Services>(ComponentName);\n    let codeLoader = await services.getService<InitialComponentLoader>(CODE_LOADER_MODULE_NAME);\n    let modulePromise = instantiateAsyncModule<T>(moduleName, codeLoader.getModuleStorage(), this.world, config || {});\n\n    let module: any = await await modulePromise;\n    let component = module.getType ? module : ((await module.createComponent(this.world, config || {})) as Component);\n    return component as T;\n  }\n\n  public getType(): string {\n    return \"LazyEntity\";\n  }\n}\n","import { ModulePromise, registerLocalModule } from \"@root/lib\";\n\n/**\n * An Item (or SmartItem) is a set of Module (Services and/or Component)\n */\nexport interface Item {\n  /**\n   * Register Asynchronous/Dynamic Component or Service\n   */\n  modules(): { [id: string]: ModulePromise };\n}\n\nexport function registerItem(item: Item) {\n  let modules = item.modules();\n  for (const key in modules) {\n    registerLocalModule(key, modules[key]);\n  }\n}\n"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","Entity","constructor","addComponent","component","init","components","push","removeAllComponents","forEach","comp","removeComponent","destroy","filter","addComponents","getComponents","getComponentByType","type","ret","getType","getComponentByTypeStartsWith","startsWith","getFirstComponentByTypeStartsWith","getFirstComponentByType","WorldEntity","super","axolotis","GLOBAL_WORLDS_ENTITY","GLOBAL_LOCAL_MODULE","getGlobalStorage","window","setGlobalStorageValue","getGlobalStorageValue","auto","globalStorage","registerLocalModule","name","moduleStorage","Error","getClassName","classname","default","console","error","async","instantiateLocalAsyncModule","fqcn","localModules","world","config","localModule","duplicateCheck","useKeyOnly","sub","moduleFound","DependencyComponentList","dependencies","i","length","dep","services","ComponentName","service","getService","instantiateAsyncModule","moduleName","log","CODE_LOADER_MODULE_NAME","InitialComponentLoader","initialLoading","Promise","resolve","initialLoadingResolver","getModuleStorage","scene","loadedCallBack","version","promises","entity","entities","componentDef","reject","createComponent","promise","load","modules","nbLoaded","promiseCb","then","all","catch","reason","LazyServices","getWorld","setService","replace","serviceAsync","modulesList","modulePromise","createService","Services","getServiceSync","createWorldSync","initialScene","finished","serviceEntity","staticServices","startLoading","createWorld","BUILD_VERSION","require","windowReady","callBack","document","readyState","body","addEventListener","initHtmlFromUrl","url","onProgress","progress","total","onLoaded","fetch","html","text","parser","DOMParser","parseFromString","getElementsByTagName","warn","htmlToJson","initHtml","sceneEl","entityRet","componentEl","correctJson","JSON","stringify","getAttribute","parse","getGlobalWorld","worlds","serviceName","LazyEntity","registerItem","item"],"sourceRoot":""}