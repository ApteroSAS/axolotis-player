{"version":3,"file":"index.js","mappings":"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","sources":["webpack://axolotis-player/webpack/universalModuleDefinition","webpack://axolotis-player/./src/lib/modules/FrameLoop.ts","webpack://axolotis-player/./src/lib/modules/core/WorldService.ts","webpack://axolotis-player/./src/lib/generated/webpack/module/ClassNameConverter.ts","webpack://axolotis-player/./src/lib/modules/core/loader/WebpackLoader.ts","webpack://axolotis-player/./src/lib/generated/webpack/module/WebpackLoader.ts","webpack://axolotis-player/./src/lib/modules/core/loader/JsLoader.ts","webpack://axolotis-player/./src/lib/modules/core/loader/LocalLoader.ts","webpack://axolotis-player/./src/lib/modules/core/service/LazyServices.ts","webpack://axolotis-player/./src/lib/modules/core/service/ServiceEntity.ts","webpack://axolotis-player/webpack/bootstrap","webpack://axolotis-player/webpack/runtime/define property getters","webpack://axolotis-player/webpack/runtime/hasOwnProperty shorthand","webpack://axolotis-player/webpack/runtime/make namespace object","webpack://axolotis-player/./src/lib/modules/core/loader/CodeLoaderComponent.ts","webpack://axolotis-player/./src/lib/modules/core/loader/CodeLoader.ts","webpack://axolotis-player/./src/lib/modules/core/ecs/Entity.ts","webpack://axolotis-player/./src/lib/modules/core/ecs/WorldEntity.ts","webpack://axolotis-player/./src/lib/modules/core/loader/CoreInit.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"axolotis-player\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"axolotis-player\"] = factory();\n\telse\n\t\troot[\"axolotis-player\"] = factory();\n})(self, function() {\nreturn ","import Component from \"@root/lib/modules/core/ecs/Component\";\n\nimport { CodeLoaderComponent } from \"@root/lib/modules/core/loader/CodeLoaderComponent\";\nimport {\n  LazyServices,\n  Service,\n} from \"@root/lib/modules/core/service/LazyServices\";\nimport { WebpackLazyModule } from \"@root/lib/modules/core/loader/WebpackLoader\";\n\nexport class Factory implements WebpackLazyModule, Service<FrameLoop> {\n  async createService(services: LazyServices): Promise<FrameLoop> {\n    let codeLoader = await services.getService<CodeLoaderComponent>(\n      \"@root/lib/modules/core/loader/CodeLoaderService\"\n    );\n    let module = new FrameLoop();\n    codeLoader.awaitInitialLoading().then(() => {\n      module.startAnimationFrameLoop();\n    });\n    return module;\n  }\n}\n\nexport class FrameLoop implements Component {\n  //TODO frame loop\n  // setInterval Frameloop\n  // animationFrame\n  // Physic update\n  // low workload adaptative loop? Like when FPS is green we execute code once evry Frame when it is not we execute once every seconde.\n  // worker loop?\n  // stats for all those loop (stats.js)\n  // API to add task consumer?\n  //callbacks:((delta:number)=>void)[] = [];\n  loops: { [id: string]: (delta: number) => void } = {};\n  private prevTime: number = 0;\n  private monitoringStart: (name) => void = () => {};\n  private monitoringEnd: (name) => void = () => {};\n  constructor() {}\n\n  startAnimationFrameLoop() {\n    const animate = (t) => {\n      this.monitoringStart(FrameLoop.name);\n      const delta = t - this.prevTime;\n      this.prevTime = t;\n      requestAnimationFrame(animate);\n      for (const callback in this.loops) {\n        this.monitoringStart(callback);\n        this.loops[callback](delta);\n        this.monitoringEnd(callback);\n      }\n      this.monitoringEnd(FrameLoop.name);\n    };\n    requestAnimationFrame(animate);\n  }\n\n  setMonitoringCallback(start: (name) => void, end: (name) => void) {\n    this.monitoringStart = start;\n    this.monitoringEnd = end;\n  }\n\n  removeLoop(loopName: string) {\n    delete this.loops[loopName];\n    this.monitoringStart(loopName); //set this loop to 0 fix\n    this.monitoringEnd(loopName);\n  }\n\n  addLoop(loopName: string, iterationCallback: (delta: number) => void) {\n    if (this.loops[loopName]) {\n      throw new Error();\n    }\n    this.loops[loopName] = iterationCallback;\n  }\n\n  getType(): string {\n    return FrameLoop.name;\n  }\n}\n","import { WebpackLazyModule } from \"@root/lib/modules/core/loader/WebpackLoader\";\nimport {\n  LazyServices,\n  Service,\n} from \"@root/lib/modules/core/service/LazyServices\";\nimport Component from \"@root/lib/modules/core/ecs/Component\";\nimport { WorldEntity } from \"@root/lib/modules/core/ecs/WorldEntity\";\nimport { ServiceEntity } from \"@root/lib/modules/core/service/ServiceEntity\";\nimport { CodeLoaderComponent } from \"@root/lib/modules/core/loader/CodeLoaderComponent\";\n\nexport class Factory implements WebpackLazyModule, Service<WorldService> {\n  constructor() {}\n\n  async createService(services: LazyServices): Promise<WorldService> {\n    return new WorldService(services);\n  }\n}\n\n//(await axolotis.worlds[1].components[0].service[\"@root/lib/modules/core/WorldService:Factory\"]).setActiveWorld(1)\n\ndeclare let window: any;\n\nlet activeWorld = -1;\nlet worlds: WorldEntity[] = [];\nlet addOnWorldChangeCallback: (() => void)[] = []; //do not use events emitter here to avoid surcharing dependencies in the code modules\nlet addOnWorldAddedCallback: (() => void)[] = []; //do not use events emitter here to avoid surcharing dependencies in the code modules\n\nexport function registerNewWorld(worldEntity: WorldEntity) {\n  worlds.push(worldEntity);\n  if (activeWorld < 0) {\n    activeWorld = 0;\n    window.axolotis.world = worlds[activeWorld];\n    window.axolotis.activeWorld = activeWorld;\n  }\n}\n\nif (window) {\n  if (!window.axolotis) {\n    window.axolotis = {};\n  }\n  window.axolotis.worlds = worlds;\n  window.axolotis.activeWorld = activeWorld;\n}\n\nexport class WorldService implements Component {\n  private world: WorldEntity;\n\n  constructor(services: LazyServices) {\n    console.log(\"info\");\n    let worldtmp: any = null;\n    for (const world of this.getWorlds()) {\n      let serviceEntity = world.getFirstComponentByType<ServiceEntity>(\n        ServiceEntity.name\n      );\n      if (serviceEntity == services) {\n        worldtmp = world;\n      }\n    }\n    if (!worldtmp) {\n      throw new Error();\n    }\n    this.world = worldtmp;\n\n    //new world service is new world event\n    services\n      .getService<CodeLoaderComponent>(\n        \"@root/lib/modules/core/loader/CodeLoaderService\"\n      )\n      .then(async (codeLoader) => {\n        codeLoader.awaitInitialLoading();\n        for (const callback of addOnWorldAddedCallback) {\n          callback();\n        }\n      });\n\n    if (activeWorld >= 0) {\n      this.setActiveWorldByNumber(activeWorld);\n    }\n  }\n\n  getType(): string {\n    return WorldService.name;\n  }\n\n  getWorlds() {\n    return worlds;\n  }\n\n  getActiveWorld() {\n    return worlds[activeWorld];\n  }\n\n  isActiveWorld() {\n    return this.world == this.getActiveWorld();\n  }\n\n  addOnWorldChangeCallback(callback: () => void, init: boolean = false) {\n    addOnWorldChangeCallback.push(callback);\n    if (init) {\n      callback();\n    }\n  }\n\n  addOnWorldAdded(callback: () => void, init: boolean = false) {\n    addOnWorldAddedCallback.push(callback);\n    if (init) {\n      callback();\n    }\n  }\n\n  setActiveWorld(world: WorldEntity) {\n    for (let i = 0; i < this.getWorlds().length; i++) {\n      if (world == this.getWorlds()[i]) {\n        this.setActiveWorldByNumber(i);\n        return;\n      }\n    }\n    throw new Error();\n  }\n\n  setActiveWorldByNumber(number: number) {\n    if (activeWorld != number) {\n      activeWorld = number;\n      if (window && window.axolotis) {\n        window.axolotis.activeWorld = activeWorld;\n        window.axolotis.world = worlds[activeWorld];\n      }\n      for (const callback of addOnWorldChangeCallback) {\n        callback();\n      }\n    }\n  }\n}\n","//Autogenerated\n/* Webpack use module name for loading and computing code bundle and split chunk so we cannot introduce variable in the import thus we create this redirecting file*/\nexport async function getWebpackClassName(path, classname) {\n  if (\n    path === \"@root/lib/modules/core/WorldService\" &&\n    classname === \"Factory\"\n  ) {\n    let module = await import(\"@root/lib/modules/core/WorldService\");\n    return module.Factory.name;\n  } else if (\n    path === \"@root/lib/modules/FrameLoop\" &&\n    classname === \"Factory\"\n  ) {\n    let module = await import(\"@root/lib/modules/FrameLoop\");\n    return module.Factory.name;\n  } else {\n    throw new Error(\"Class Not Found\");\n  }\n}\n","import { loadModuleAsync } from \"@root/lib/generated/webpack/module/WebpackLoader\";\nimport { getWebpackClassName } from \"@root/lib/generated/webpack/module/ClassNameConverter\";\n\n//TODO separate the concept of of webpack module and world component (see WebpackLoader)\n//Add the concept of service that can lazy load - using everywhere with the same name and no parameters\n// eg three and ammo are singleton service\n// using tuple package + class name like webpack module\n// idea add a system entity in the world that list all the services and maintains unicity?\n// using or not the world API - World entity have a type but the name is set in the class - a little dirty since i do not want to hardcode the package in the class as a name.\n//lazy load entity would be cool tho\n\nexport interface WebpackLazyModule {\n  /* constructor(); should have a constructor */\n}\n\nexport async function instanciateWebpackAsyncModule<T>(\n  importPath: string,\n  classname: string\n): Promise<T> {\n  const module = await loadModuleAsync(importPath);\n  for (const key in module) {\n    const sub = module[key];\n    if (\n      sub.prototype &&\n      sub.prototype.constructor.name ===\n        (await getWebpackClassName(importPath, classname))\n    ) {\n      //identifiying the module\n      return new sub();\n    }\n  }\n  throw new Error(\"invalid factory \" + importPath + \" - \" + classname);\n}\n","export async function loadModuleAsync(name): Promise<any> {\n  //Autogenerated\n  /* Webpack use module name for loading and computing code bundle and split chunk so we cannot introduce variable in the import thus we create this redirecting file*/\n  switch (name) {\n    case \"@root/lib/modules/core/WorldService\":\n      return import(\"@root/lib/modules/core/WorldService\");\n    case \"@root/lib/modules/FrameLoop\":\n      return import(\"@root/lib/modules/FrameLoop\");\n    default:\n      throw new Error(\n        name + \" not found in module list - please run npm run pre-build\"\n      );\n  }\n}\n","import { ComponentFactory } from \"@root/lib/modules/core/ecs/ComponentFactory\";\nimport Component from \"@root/lib/modules/core/ecs/Component\";\nimport { instanciateWebpackAsyncModule } from \"@root/lib/modules/core/loader/WebpackLoader\";\nimport { instanciateLocalAsyncModule } from \"@root/lib/modules/core/loader/LocalLoader\";\n\nlet localModules: { [id: string]: () => Promise<any> } = {};\n\nexport function registerLocalModule(name: string, module: () => Promise<any>) {\n  if (localModules[name]) {\n    throw new Error(\"Module already defined\");\n  }\n  localModules[name] = module;\n}\n\nexport async function instanciateJsAsyncModule<T>(\n  moduleName: string,\n  classname: string\n): Promise<T> {\n  let module = null;\n  if (localModules[moduleName]) {\n    module = await instanciateLocalAsyncModule<ComponentFactory<Component>>(\n      moduleName,\n      classname,\n      localModules\n    );\n  } else {\n    module = await instanciateWebpackAsyncModule<ComponentFactory<Component>>(\n      moduleName,\n      classname\n    );\n  }\n  return module;\n}\n","import { getWebpackClassName } from \"@root/lib/generated/webpack/module/ClassNameConverter\";\n\nexport async function instanciateLocalAsyncModule<T>(\n  moduleName: string,\n  classname: string,\n  localModules: { [id: string]: () => Promise<any> } = {}\n): Promise<T> {\n  const module = await localModules[moduleName]();\n  for (const key in module) {\n    const sub = module[key];\n    if (sub.prototype && sub.prototype.constructor.name === classname) {\n      //identifiying the module\n      return new sub();\n    }\n  }\n  throw new Error(\"invalid factory \" + moduleName + \" - \" + classname);\n}\n","import { instanciateWebpackAsyncModule } from \"@root/lib/modules/core/loader/WebpackLoader\";\nimport Component from \"@root/lib/modules/core/ecs/Component\";\nimport { instanciateJsAsyncModule } from \"@root/lib/modules/core/loader/JsLoader\";\n\nexport interface Service<T> {\n  createService(services: LazyServices): Promise<T>;\n}\n\nexport class LazyServices {\n  service: { [id: string]: Promise<Component> | undefined } = {};\n\n  toId(path, classname) {\n    return path + \":\" + classname;\n  }\n\n  /* async getServiceFromModue<T>(modulePromise:Promise<any>, classname:string = \"Factory\"):Promise<any>{\n\n    }*/\n\n  setService(path: string, service: Component, classname: string = \"Factory\") {\n    this.service[this.toId(path, classname)] = Promise.resolve(service);\n  }\n\n  async getService<T extends Component>(\n    path: string,\n    classname: string = \"Factory\"\n  ): Promise<T> {\n    if (this.service[this.toId(path, classname)]) {\n      const module = await this.service[this.toId(path, classname)];\n      if (!module) {\n        throw new Error(\"error\");\n      }\n      return module as T;\n    }\n    if (!this.service[this.toId(path, classname)]) {\n      let modulePromise = instanciateJsAsyncModule<Service<T>>(path, classname);\n      this.service[this.toId(path, classname)] = new Promise(\n        async (resolve) => {\n          let t: Component = await (await modulePromise).createService(this);\n          resolve(t);\n        }\n      );\n    }\n    return (await this.service[this.toId(path, classname)]) as T;\n  }\n}\n","import Component from \"@root/lib/modules/core/ecs/Component\";\nimport { LazyServices } from \"@root/lib/modules/core/service/LazyServices\";\n\nexport class ServiceEntity extends LazyServices implements Component {\n  getType(): string {\n    return ServiceEntity.name;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Component from \"@root/lib/modules/core/ecs/Component\";\nimport { load } from \"@root/lib/modules/core/loader/CodeLoader\";\nimport { ComponentFactory } from \"@root/lib/modules/core/ecs/ComponentFactory\";\nimport { WorldEntity } from \"@root/lib/modules/core/ecs/WorldEntity\";\nimport { ServiceEntity } from \"@root/lib/modules/core/service/ServiceEntity\";\nimport { instanciateJsAsyncModule } from \"@root/lib/modules/core/loader/JsLoader\";\n\nexport class CodeLoaderComponent implements Component {\n  private initialLoading: Promise<any>;\n  private initialLoadingResolver: ((value: any) => void) | undefined;\n  public roomUrl: string = \"\";\n\n  constructor() {\n    this.initialLoading = new Promise<any>((resolve) => {\n      this.initialLoadingResolver = resolve;\n    });\n  }\n\n  cleanUpRoomUrl(roomUrl: string) {\n    if (!roomUrl.endsWith(\".json\")) {\n      roomUrl += \"/room.json\";\n    }\n    roomUrl.replace(\"./\", \"\");\n    if (!roomUrl.startsWith(\"http\")) {\n      roomUrl = window.location.origin + \"/\" + roomUrl;\n    }\n    return roomUrl;\n  }\n\n  async loadRoomDefinitionFile(roomUrl: string) {\n    roomUrl = this.cleanUpRoomUrl(roomUrl);\n    this.roomUrl = roomUrl;\n    let response = await fetch(roomUrl);\n    return await response.json();\n  }\n\n  async searchRoomDefinitionFile() {\n    //how to find a room\n    //1 - search in window.axolotis.room\n    //2 - search in meta tag\n    if ((window as any).axolotis && (window as any).axolotis.room) {\n      return (window as any).axolotis.room;\n    }\n    // @ts-ignore\n    for (const tag of window.document.head.children) {\n      if (tag.tagName === \"META\" && (tag as any).name === \"axolotis:room\") {\n        let roomUrl = (tag as any).content;\n        return this.loadRoomDefinitionFile(roomUrl);\n      }\n    }\n    throw new Error(\"No room definition found in meta axolotis:room\");\n  }\n\n  getType(): string {\n    return CodeLoaderComponent.name;\n  }\n\n  async awaitInitialLoading() {\n    await this.initialLoading;\n  }\n\n  async startLoadingJson(\n    world: WorldEntity,\n    scene: {\n      version: string;\n      entities: {\n        components: {\n          module: string;\n          config: any;\n          classname: string | undefined;\n        }[];\n      }[];\n      services: { module: string }[];\n    },\n    loadedCallBack: (progress: number, total: number) => void\n  ) {\n    let promises: (() => Promise<any>)[] = [];\n    for (const entity of scene.entities) {\n      for (const componentDef of entity.components) {\n        let config = componentDef.config;\n        promises.push(\n          () =>\n            new Promise(async (resolve, reject) => {\n              let classname = componentDef.classname || \"Factory\";\n              const module = await instanciateJsAsyncModule<\n                ComponentFactory<Component>\n              >(componentDef.module, classname);\n              let component = await module.createComponent(world, config || {});\n              if (!component.getType) {\n                throw new Error(\n                  \"Not a component : \" +\n                    componentDef.module +\n                    \" \" +\n                    component.constructor.name\n                );\n              }\n              world.addComponent(component); //TODO world default but should ad to an entity\n              resolve(module);\n            })\n        );\n      }\n    }\n\n    for (const serviceDef of scene.services) {\n      promises.push(\n        () =>\n          new Promise(async (resolve, reject) => {\n            let service = await world.getFirstComponentByType<ServiceEntity>(\n              ServiceEntity.name\n            );\n            await service.getService<any>(serviceDef.module);\n            resolve(service);\n          })\n      );\n    }\n\n    let promise = load(promises, loadedCallBack);\n    promise.then((value) => {\n      if (this.initialLoadingResolver !== undefined) {\n        this.initialLoadingResolver(value);\n      }\n    });\n    promise.catch((reason) => {\n      console.error(reason);\n    });\n    return promise;\n  }\n}\n","export function load(\n  modules: (() => Promise<any>)[],\n  loadedCallBack: (progress: number, total: number) => void\n) {\n  let ret: any[] = [];\n  let nbLoaded = 0;\n  for (const promiseCb of modules) {\n    const promise = promiseCb(); //trigger the load\n    ret.push(promise);\n    promise.then(() => {\n      nbLoaded++;\n      loadedCallBack(nbLoaded, modules.length);\n    });\n  }\n  return Promise.all(ret);\n}\n","import { DestroyableComponent } from \"./DestroyableComponent\";\nimport { Component } from \"./Component\";\n\nexport class Entity implements Component {\n  private components: Component[] = [];\n  private waitingForComponent: { [id: string]: any[] } = {};\n\n  constructor(private name: string) {}\n\n  public addComponent<T extends Component>(component: T): T {\n    this.components.push(component);\n\n    //part for async getComponent\n    if (this.waitingForComponent[component.getType()]) {\n      for (const elem of this.waitingForComponent[component.getType()]) {\n        elem(component);\n      }\n      delete this.waitingForComponent[component.getType()];\n    }\n\n    return component;\n  }\n\n  public removeAllComponents() {\n    this.components.forEach((comp) => {\n      this.removeComponent(comp);\n    });\n  }\n\n  public removeComponent<T extends Component>(component: T): T {\n    if (\"destroy\" in component) {\n      (component as any as DestroyableComponent).destroy();\n    }\n    this.components = this.components.filter((comp) => {\n      return comp != component;\n    });\n    return component;\n  }\n\n  public addComponents(components: Component[]) {\n    components.forEach((comp) => {\n      this.addComponent(comp);\n    });\n  }\n\n  public getComponents(): Component[] {\n    return this.components;\n  }\n\n  public getComponentByType<T extends Component>(type: string): T[] {\n    let ret: T[] = [];\n    this.components.forEach((comp) => {\n      if (comp.getType() === type) {\n        ret.push(comp as T);\n      }\n    });\n    return ret;\n  }\n\n  public getComponentByTypeStartsWith(type: string): Component[] {\n    let ret: Component[] = [];\n    this.components.forEach((comp) => {\n      if (comp.getType().startsWith(type)) {\n        ret.push(comp);\n      }\n    });\n    return ret;\n  }\n\n  public getFirstComponentByTypeStartsWith<T extends Component>(\n    type: string\n  ): T {\n    return this.getComponentByTypeStartsWith(type)[0] as T;\n  }\n\n  public getFirstComponentByType<T extends Component>(type: string): T {\n    return this.getComponentByType(type)[0] as T;\n  }\n\n  public async getFirstComponentByTypeAsync<T extends Component>(\n    type: string\n  ): Promise<T> {\n    if (this.getComponentByType(type)[0]) {\n      return this.getComponentByType(type)[0] as T;\n    } else {\n      if (!this.waitingForComponent[type]) {\n        this.waitingForComponent[type] = [];\n      }\n      let promise = new Promise<T>((resolve, reject) => {\n        this.waitingForComponent[type].push(resolve); //will resolve later\n      });\n      return promise;\n    }\n  }\n\n  public getType(): string {\n    return this.name;\n  }\n}\n\nexport default Entity;\n","import Entity from \"@root/lib/modules/core/ecs/Entity\";\nimport { registerNewWorld } from \"@root/lib/modules/core/WorldService\";\n\nexport class WorldEntity extends Entity {\n  constructor() {\n    super(\"world\");\n    registerNewWorld(this);\n  }\n}\n","import { CodeLoaderComponent } from \"@root/lib/modules/core/loader/CodeLoaderComponent\";\nimport { ServiceEntity } from \"@root/lib/modules/core/service/ServiceEntity\";\nimport { WorldEntity } from \"@root/lib/modules/core/ecs/WorldEntity\";\n\nexport const BUILD_VERSION = require(\"../../../../../package.json\").version;\nconsole.log(BUILD_VERSION);\n\nconst domReady = (callBack: () => void) => {\n  if (document.readyState === \"loading\") {\n    document.addEventListener(\"DOMContentLoaded\", callBack);\n  } else {\n    callBack();\n  }\n};\n\nconst windowReady = (callBack: () => void) => {\n  if (document.readyState === \"complete\" && document.body) {\n    callBack();\n  } else {\n    window.addEventListener(\"DOMContentLoaded\", callBack);\n  }\n};\n\nexport function initHtml(\n  config: {\n    onProgress?: (progress: number, total: number) => void;\n    onLoaded?: () => void;\n  } = {}\n) {\n  if (!config.onProgress) {\n    config.onProgress = () => {};\n  }\n  if (!config.onLoaded) {\n    config.onLoaded = () => {};\n  }\n  let serviceEntity = new ServiceEntity();\n  let world = new WorldEntity();\n  world.addComponent(serviceEntity);\n  let codeLoaderComponent = new CodeLoaderComponent();\n  serviceEntity.setService(\n    \"@root/lib/modules/core/loader/CodeLoaderService\",\n    codeLoaderComponent\n  );\n  windowReady(() => {\n    let scene: HTMLCollection =\n      window.document.body.getElementsByTagName(\"ax-scene\"); //TODO assume only one scene\n    if (!scene || (scene && scene.length == 0)) {\n      console.warn(\"Axolotis scene not found (no tag ax-scene)\");\n      config.onLoaded();\n      return;\n    }\n    console.log(scene);\n    codeLoaderComponent\n      .startLoadingJson(world, htmlToJson(scene), config.onProgress)\n      .then(config.onLoaded);\n  });\n}\n\nfunction htmlToJson(scene: HTMLCollection): {\n  version: string;\n  entities: {\n    components: {\n      module: string;\n      config: any;\n      classname: string | undefined;\n    }[];\n  }[];\n  services: { module: string }[];\n} {\n  let sceneEl = scene[0];\n  const ret = {\n    version: \"2.0\",\n    entities: [],\n    services: [],\n  };\n  // @ts-ignore\n  for (const entity of sceneEl.getElementsByTagName(\"ax-entity\")) {\n    //§§§ ICI sdhdfhdfshdf\n    let entityRet = { components: [] };\n\n    for (const componentEl of entity.getElementsByTagName(\"ax-component\")) {\n      //convert relaxed json to proper json\n      let correctJson = componentEl\n        .getAttribute(\"config\")\n        .replace(/(['\"])?([a-z0-9A-Z_]+)(['\"])?:/g, '\"$2\": ');\n      let component = {\n        module: componentEl.getAttribute(\"module\"),\n        config: JSON.parse(correctJson),\n      };\n      entityRet.components.push(component);\n    }\n    ret.entities.push(entityRet);\n  }\n  // @ts-ignore\n  for (const service of sceneEl.getElementsByTagName(\"ax-service\")) {\n    ret.services.push({ module: service.getAttribute(\"module\") });\n  }\n  return ret;\n}\n\nexport function initJson() {\n  let serviceEntity = new ServiceEntity();\n  let world = new WorldEntity();\n  world.addComponent(serviceEntity);\n  let codeLoaderComponent = new CodeLoaderComponent();\n  serviceEntity.setService(\n    \"@root/lib/modules/core/loader/CodeLoaderService\",\n    codeLoaderComponent\n  );\n  codeLoaderComponent.searchRoomDefinitionFile().then((json) => {\n    codeLoaderComponent\n      .startLoadingJson(world, json.entities, (progress, total) => {\n        console.log(\"[\" + progress + \"/\" + total + \"]\");\n        const progressbar: any = document.getElementById(\"progress\");\n        progressbar.style.width = `${(progress / total) * 100}%`;\n      })\n      .then(() => {\n        console.log(\"loading complete\");\n        (document.getElementById(\"progresscontainer\") as any).className +=\n          \"load\";\n      });\n  });\n}\n"],"names":["root","factory","exports","module","define","amd","self","Factory","services","codeLoader","getService","FrameLoop","awaitInitialLoading","then","startAnimationFrameLoop","constructor","animate","t","this","monitoringStart","name","delta","prevTime","requestAnimationFrame","callback","loops","monitoringEnd","setMonitoringCallback","start","end","removeLoop","loopName","addLoop","iterationCallback","Error","getType","WorldService","activeWorld","worlds","addOnWorldChangeCallback","addOnWorldAddedCallback","registerNewWorld","worldEntity","push","window","axolotis","world","console","log","worldtmp","getWorlds","getFirstComponentByType","ServiceEntity","async","setActiveWorldByNumber","getActiveWorld","isActiveWorld","init","addOnWorldAdded","setActiveWorld","i","length","number","getWebpackClassName","path","classname","instanciateWebpackAsyncModule","importPath","loadModuleAsync","key","sub","prototype","localModules","registerLocalModule","instanciateJsAsyncModule","moduleName","instanciateLocalAsyncModule","LazyServices","toId","setService","service","Promise","resolve","modulePromise","createService","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","o","Object","defineProperty","enumerable","get","obj","prop","hasOwnProperty","call","r","Symbol","toStringTag","value","CodeLoaderComponent","initialLoading","initialLoadingResolver","cleanUpRoomUrl","roomUrl","endsWith","replace","startsWith","location","origin","response","fetch","json","room","tag","document","head","children","tagName","content","loadRoomDefinitionFile","scene","loadedCallBack","promises","entity","entities","componentDef","components","config","reject","component","createComponent","addComponent","serviceDef","promise","modules","ret","nbLoaded","promiseCb","all","load","catch","reason","error","waitingForComponent","elem","removeAllComponents","forEach","comp","removeComponent","destroy","filter","addComponents","getComponents","getComponentByType","type","getComponentByTypeStartsWith","getFirstComponentByTypeStartsWith","WorldEntity","Entity","super","BUILD_VERSION","require","windowReady","callBack","readyState","body","addEventListener","initHtml","onProgress","onLoaded","serviceEntity","codeLoaderComponent","getElementsByTagName","warn","startLoadingJson","htmlToJson","sceneEl","version","entityRet","componentEl","correctJson","getAttribute","JSON","parse"],"sourceRoot":""}