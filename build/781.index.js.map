{"version":3,"file":"781.index.js","mappings":";;;;;;;;;;;qPAWO,SAASA,IAAoB,MAClC,GAAI,UAACC,OAAOC,gBAAR,QAAC,EAAiBC,SAAU,CAC9B,IAAIA,EAAW,IAAIC,EAAAA,cAAoB,CAAEC,WAAW,IACpDF,EAASG,QAAQL,OAAOM,WAAYN,OAAOO,aAE3CL,EAASM,YAAcL,EAAAA,sBACvBD,EAASO,oBAAsB,EAC/BP,EAASQ,eAAiBP,EAAAA,aAC1BD,EAASS,cAAcX,OAAOY,kBAE9BC,SAASC,KAAKC,YAAYb,EAASc,YAC9BhB,OAAOC,WACVD,OAAOC,SAAW,IAEpBD,OAAOC,SAASC,SAAWA,EAE7B,OAAOF,OAAOC,SAASC,SAGlB,MAAMe,EAKXC,YAAYC,EAAsBC,G,YADF,I,EAC8B,mB,EAAA,M,sFAC5DC,KAAKC,MAAQ,IAAInB,EAAAA,MAEjBkB,KAAKnB,SAAWH,IAEhBsB,KAAKE,OAAS,IAAIpB,EAAAA,kBAChB,GACAH,OAAOM,WAAaN,OAAOO,YAC3B,KACA,KAEFc,KAAKE,OAAOC,SAASC,EAAI,EAEzB,MAAMC,EAAS,KACb,IAAK,MAAMC,KAAaN,KAAKO,cAC3BD,IAGFN,KAAKnB,SAASwB,OAAOL,KAAKC,MAAOD,KAAKE,QAEtCF,KAAKnB,SAAS2B,WAAY,GAGtBC,EAAiB,KACrBT,KAAKE,OAAOQ,OAAS/B,OAAOM,WAAaN,OAAOO,YAChDc,KAAKE,OAAOS,yBACZX,KAAKnB,SAASG,QAAQL,OAAOM,WAAYN,OAAOO,aAChDmB,KAGFN,EAAaa,0BAAyB,KACpCjC,OAAOkC,oBAAoB,SAAUJ,GACrCX,EAAUgB,WAAWlB,EAASmB,MAC1BhB,EAAaiB,kBACfrC,OAAOsC,iBAAiB,SAAUR,GAAgB,GAClDX,EAAUoB,QAAQtB,EAASmB,KAAMV,OAElC,GAILc,UACE,OAAOvB,EAASmB,MAIb,MAAMK,EACXvB,eAEY,aAACwB,GACX,IAAIvB,QAAkBuB,EAASC,WAC7B,+BAEEvB,QAAqBsB,EAASC,WAChC,uCAEF,OAAO,IAAI1B,EAASE,EAAWC","sources":["webpack://axolotis-player/./src/lib/modules/three/ThreeLib.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport Component from \"@root/lib/modules/core/ecs/Component\";\nimport { FrameLoop } from \"@root/lib/modules/FrameLoop\";\nimport { WebpackLazyModule } from \"@root/lib/modules/core/loader/WebpackLoader\";\nimport {\n  LazyServices,\n  Service,\n} from \"@root/lib/modules/core/service/LazyServices\";\nimport { WorldService } from \"@root/lib/modules/core/WorldService\";\n\ndeclare let window: any;\nexport function getGlobalRenderer() {\n  if (!window.axolotis?.renderer) {\n    let renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    renderer.toneMappingExposure = 1;\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    document.body.appendChild(renderer.domElement);\n    if (!window.axolotis) {\n      window.axolotis = {};\n    }\n    window.axolotis.renderer = renderer;\n  }\n  return window.axolotis.renderer;\n}\n\nexport class ThreeLib implements Component {\n  renderer: THREE.WebGLRenderer;\n  scene: THREE.Scene;\n  camera: THREE.PerspectiveCamera;\n  preRenderPass: (() => void)[] = [];\n  constructor(frameLoop: FrameLoop, worldService: WorldService) {\n    this.scene = new THREE.Scene();\n\n    this.renderer = getGlobalRenderer();\n\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.001,\n      100000\n    );\n    this.camera.position.z = 2;\n\n    const render = () => {\n      for (const prerender of this.preRenderPass) {\n        prerender();\n      }\n      // FINAL PASS\n      this.renderer.render(this.scene, this.camera);\n      // set things back to normal\n      this.renderer.autoClear = true;\n    };\n\n    const onWindowResize = () => {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      render();\n    };\n\n    worldService.addOnWorldChangeCallback(() => {\n      window.removeEventListener(\"resize\", onWindowResize);\n      frameLoop.removeLoop(ThreeLib.name);\n      if (worldService.isActiveWorld()) {\n        window.addEventListener(\"resize\", onWindowResize, false);\n        frameLoop.addLoop(ThreeLib.name, render);\n      }\n    }, true);\n  }\n\n  //TODO rename to getType\n  getType(): string {\n    return ThreeLib.name;\n  }\n}\n\nexport class Factory implements WebpackLazyModule, Service<ThreeLib> {\n  constructor() {}\n\n  async create(services: LazyServices): Promise<ThreeLib> {\n    let frameLoop = await services.getService<FrameLoop>(\n      \"@root/lib/modules/FrameLoop\"\n    );\n    let worldService = await services.getService<WorldService>(\n      \"@root/lib/modules/core/WorldService\"\n    );\n    return new ThreeLib(frameLoop, worldService);\n  }\n}\n"],"names":["getGlobalRenderer","window","axolotis","renderer","THREE","antialias","setSize","innerWidth","innerHeight","toneMapping","toneMappingExposure","outputEncoding","setPixelRatio","devicePixelRatio","document","body","appendChild","domElement","ThreeLib","constructor","frameLoop","worldService","this","scene","camera","position","z","render","prerender","preRenderPass","autoClear","onWindowResize","aspect","updateProjectionMatrix","addOnWorldChangeCallback","removeEventListener","removeLoop","name","isActiveWorld","addEventListener","addLoop","getType","Factory","services","getService"],"sourceRoot":""}