{"version":3,"file":"106.index.js","mappings":"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","sources":["webpack://axolotis-player/./node_modules/three/examples/jsm/loaders/RGBELoader.js","webpack://axolotis-player/./node_modules/three/examples/jsm/utils/RoughnessMipmapper.js","webpack://axolotis-player/./src/lib/modules/scenes/demo1/GLTFScene.ts"],"sourcesContent":["import {\n\tDataTextureLoader,\n\tDataUtils,\n\tFloatType,\n\tHalfFloatType,\n\tLinearEncoding,\n\tLinearFilter,\n\tNearestFilter,\n\tRGBEEncoding,\n\tRGBEFormat,\n\tRGBFormat,\n\tUnsignedByteType\n} from 'three';\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.type = HalfFloatType;\n\n\t}\n\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\tparse( buffer ) {\n\n\t\tconst\n\t\t\t/* return codes for rgbe routines */\n\t\t\t//RGBE_RETURN_SUCCESS = 0,\n\t\t\tRGBE_RETURN_FAILURE = - 1,\n\n\t\t\t/* default error routine.  change this to change error handling */\n\t\t\trgbe_read_error = 1,\n\t\t\trgbe_write_error = 2,\n\t\t\trgbe_format_error = 3,\n\t\t\trgbe_memory_error = 4,\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\tcase rgbe_read_error: console.error( 'THREE.RGBELoader Read Error: ' + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_write_error: console.error( 'THREE.RGBELoader Write Error: ' + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_format_error: console.error( 'THREE.RGBELoader Bad File Format: ' + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase rgbe_memory_error: console.error( 'THREE.RGBELoader: Error: ' + ( msg || '' ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn RGBE_RETURN_FAILURE;\n\n\t\t\t},\n\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\tNEWLINE = '\\n',\n\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\tconst chunkSize = 128;\n\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\tlet p = buffer.pos,\n\t\t\t\t\ti = - 1, len = 0, s = '',\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\tp += chunkSize;\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\n\t\t\t\t// regexes to parse header info fields\n\t\t\t\tconst magic_token_re = /^#\\?(\\S+)/,\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\theader = {\n\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t};\n\n\t\t\t\tlet line, match;\n\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_read_error, 'no header found' );\n\n\t\t\t\t}\n\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'bad initial token' );\n\n\t\t\t\t}\n\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\theader.comments += line + '\\n';\n\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'missing format specifier' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'missing image size specifier' );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t},\n\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\tconst scanline_width = w;\n\n\t\t\t\tif (\n\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// return the flat buffer\n\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'wrong scanline width' );\n\n\t\t\t\t}\n\n\t\t\t\tconst data_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\tif ( ! data_rgba.length ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_memory_error, 'unable to allocate buffer space' );\n\n\t\t\t\t}\n\n\t\t\t\tlet offset = 0, pos = 0;\n\n\t\t\t\tconst ptr_end = 4 * scanline_width;\n\t\t\t\tconst rgbeStart = new Uint8Array( 4 );\n\t\t\t\tconst scanline_buffer = new Uint8Array( ptr_end );\n\t\t\t\tlet num_scanlines = h;\n\n\t\t\t\t// read in each successive scanline\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_read_error );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'bad rgbe scanline format' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\tlet ptr = 0, count;\n\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\tconst isEncodedRun = count > 128;\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'bad scanline data' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\tconst byteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\tconst l = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\tfor ( let i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\tlet off = 0;\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t}\n\n\t\t\t\treturn data_rgba;\n\n\t\t\t};\n\n\t\tconst RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\n\t\t};\n\n\t\tconst RGBEByteToRGBHalf = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t// clamping to 65504, the maximum representable value in float16\n\t\t\tdestArray[ destOffset + 0 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 0 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 1 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 1 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 2 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 2 ] * scale, 65504 ) );\n\n\t\t};\n\n\t\tconst byteArray = new Uint8Array( buffer );\n\t\tbyteArray.pos = 0;\n\t\tconst rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\tif ( RGBE_RETURN_FAILURE !== rgbe_header_info ) {\n\n\t\t\tconst w = rgbe_header_info.width,\n\t\t\t\th = rgbe_header_info.height,\n\t\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\t\t\tif ( RGBE_RETURN_FAILURE !== image_rgba_data ) {\n\n\t\t\t\tlet data, format, type;\n\t\t\t\tlet numElements;\n\n\t\t\t\tswitch ( this.type ) {\n\n\t\t\t\t\tcase UnsignedByteType:\n\n\t\t\t\t\t\tdata = image_rgba_data;\n\t\t\t\t\t\tformat = RGBEFormat; // handled as THREE.RGBAFormat in shaders\n\t\t\t\t\t\ttype = UnsignedByteType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\n\t\t\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\t\t\tconst floatArray = new Float32Array( numElements * 3 );\n\n\t\t\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdata = floatArray;\n\t\t\t\t\t\tformat = RGBFormat;\n\t\t\t\t\t\ttype = FloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\t\t\tconst halfArray = new Uint16Array( numElements * 3 );\n\n\t\t\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdata = halfArray;\n\t\t\t\t\t\tformat = RGBFormat;\n\t\t\t\t\t\ttype = HalfFloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader: unsupported type: ', this.type );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\twidth: w, height: h,\n\t\t\t\t\tdata: data,\n\t\t\t\t\theader: rgbe_header_info.string,\n\t\t\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\t\t\texposure: rgbe_header_info.exposure,\n\t\t\t\t\tformat: format,\n\t\t\t\t\ttype: type\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tsetDataType( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase UnsignedByteType:\n\n\t\t\t\t\ttexture.encoding = RGBEEncoding;\n\t\t\t\t\ttexture.minFilter = NearestFilter;\n\t\t\t\t\ttexture.magFilter = NearestFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn super.load( url, onLoadCallback, onProgress, onError );\n\n\t}\n\n}\n\nexport { RGBELoader };\n","/**\n * This class generates custom mipmaps for a roughness map by encoding the lost variation in the\n * normal map mip levels as increased roughness in the corresponding roughness mip levels. This\n * helps with rendering accuracy for MeshStandardMaterial, and also helps with anti-aliasing when\n * using PMREM. If the normal map is larger than the roughness map, the roughness map will be\n * enlarged to match the dimensions of the normal map.\n */\n\nimport {\n\tMathUtils,\n\tMesh,\n\tNoBlending,\n\tOrthographicCamera,\n\tPlaneGeometry,\n\tRawShaderMaterial,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\n\nconst _mipmapMaterial = _getMipmapMaterial();\n\nconst _mesh = new Mesh( new PlaneGeometry( 2, 2 ), _mipmapMaterial );\n\nconst _flatCamera = new OrthographicCamera( 0, 1, 0, 1, 0, 1 );\n\nlet _tempTarget = null;\n\nlet _renderer = null;\n\nclass RoughnessMipmapper {\n\n\tconstructor( renderer ) {\n\n\t\t_renderer = renderer;\n\n\t\t_renderer.compile( _mesh, _flatCamera );\n\n\t}\n\n\tgenerateMipmaps( material ) {\n\n\t\tif ( 'roughnessMap' in material === false ) return;\n\n\t\tconst { roughnessMap, normalMap } = material;\n\n\t\tif ( roughnessMap === null || normalMap === null || ! roughnessMap.generateMipmaps || material.userData.roughnessUpdated ) return;\n\n\t\tmaterial.userData.roughnessUpdated = true;\n\n\t\tlet width = Math.max( roughnessMap.image.width, normalMap.image.width );\n\t\tlet height = Math.max( roughnessMap.image.height, normalMap.image.height );\n\n\t\tif ( ! MathUtils.isPowerOfTwo( width ) || ! MathUtils.isPowerOfTwo( height ) ) return;\n\n\t\tconst oldTarget = _renderer.getRenderTarget();\n\n\t\tconst autoClear = _renderer.autoClear;\n\n\t\t_renderer.autoClear = false;\n\n\t\tif ( _tempTarget === null || _tempTarget.width !== width || _tempTarget.height !== height ) {\n\n\t\t\tif ( _tempTarget !== null ) _tempTarget.dispose();\n\n\t\t\t_tempTarget = new WebGLRenderTarget( width, height, { depthBuffer: false } );\n\n\t\t\t_tempTarget.scissorTest = true;\n\n\t\t}\n\n\t\tif ( width !== roughnessMap.image.width || height !== roughnessMap.image.height ) {\n\n\t\t\tconst params = {\n\t\t\t\twrapS: roughnessMap.wrapS,\n\t\t\t\twrapT: roughnessMap.wrapT,\n\t\t\t\tmagFilter: roughnessMap.magFilter,\n\t\t\t\tminFilter: roughnessMap.minFilter,\n\t\t\t\tdepthBuffer: false\n\t\t\t};\n\n\t\t\tconst newRoughnessTarget = new WebGLRenderTarget( width, height, params );\n\n\t\t\tnewRoughnessTarget.texture.generateMipmaps = true;\n\n\t\t\t// Setting the render target causes the memory to be allocated.\n\n\t\t\t_renderer.setRenderTarget( newRoughnessTarget );\n\n\t\t\tmaterial.roughnessMap = newRoughnessTarget.texture;\n\n\t\t\tif ( material.metalnessMap == roughnessMap ) material.metalnessMap = material.roughnessMap;\n\n\t\t\tif ( material.aoMap == roughnessMap ) material.aoMap = material.roughnessMap;\n\n\t\t\t// Copy UV transform parameters\n\n\t\t\tmaterial.roughnessMap.offset.copy( roughnessMap.offset );\n\t\t\tmaterial.roughnessMap.repeat.copy( roughnessMap.repeat );\n\t\t\tmaterial.roughnessMap.center.copy( roughnessMap.center );\n\t\t\tmaterial.roughnessMap.rotation = roughnessMap.rotation;\n\t\t\tmaterial.roughnessMap.image = roughnessMap.image;\n\n\t\t\tmaterial.roughnessMap.matrixAutoUpdate = roughnessMap.matrixAutoUpdate;\n\t\t\tmaterial.roughnessMap.matrix.copy( roughnessMap.matrix );\n\n\t\t}\n\n\t\t_mipmapMaterial.uniforms.roughnessMap.value = roughnessMap;\n\n\t\t_mipmapMaterial.uniforms.normalMap.value = normalMap;\n\n\t\tconst position = new Vector2( 0, 0 );\n\n\t\tconst texelSize = _mipmapMaterial.uniforms.texelSize.value;\n\n\t\tfor ( let mip = 0; width >= 1 && height >= 1; ++ mip, width /= 2, height /= 2 ) {\n\n\t\t\t// Rendering to a mip level is not allowed in webGL1. Instead we must set\n\t\t\t// up a secondary texture to write the result to, then copy it back to the\n\t\t\t// proper mipmap level.\n\n\t\t\ttexelSize.set( 1.0 / width, 1.0 / height );\n\n\t\t\tif ( mip == 0 ) texelSize.set( 0.0, 0.0 );\n\n\t\t\t_tempTarget.viewport.set( position.x, position.y, width, height );\n\n\t\t\t_tempTarget.scissor.set( position.x, position.y, width, height );\n\n\t\t\t_renderer.setRenderTarget( _tempTarget );\n\n\t\t\t_renderer.render( _mesh, _flatCamera );\n\n\t\t\t_renderer.copyFramebufferToTexture( position, material.roughnessMap, mip );\n\n\t\t\t_mipmapMaterial.uniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t}\n\n\t\tif ( roughnessMap !== material.roughnessMap ) roughnessMap.dispose();\n\n\t\t_renderer.setRenderTarget( oldTarget );\n\n\t\t_renderer.autoClear = autoClear;\n\n\t}\n\n\tdispose() {\n\n\t\t_mipmapMaterial.dispose();\n\n\t\t_mesh.geometry.dispose();\n\n\t\tif ( _tempTarget != null ) _tempTarget.dispose();\n\n\t}\n\n}\n\nfunction _getMipmapMaterial() {\n\n\tconst shaderMaterial = new RawShaderMaterial( {\n\n\t\tuniforms: {\n\t\t\troughnessMap: { value: null },\n\t\t\tnormalMap: { value: null },\n\t\t\ttexelSize: { value: new Vector2( 1, 1 ) }\n\t\t},\n\n\t\tvertexShader: /* glsl */`\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tattribute vec3 position;\n\t\t\tattribute vec2 uv;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tvoid main() {\n\n\t\t\t\tvUv = uv;\n\n\t\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t\t}\n\t\t`,\n\n\t\tfragmentShader: /* glsl */`\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tuniform sampler2D roughnessMap;\n\t\t\tuniform sampler2D normalMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\n\t\t\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\n\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tfloat roughnessToVariance( float roughness ) {\n\n\t\t\t\tfloat variance = 0.0;\n\n\t\t\t\tif ( roughness >= r1 ) {\n\n\t\t\t\t\tvariance = ( r0 - roughness ) * ( v1 - v0 ) / ( r0 - r1 ) + v0;\n\n\t\t\t\t} else if ( roughness >= r4 ) {\n\n\t\t\t\t\tvariance = ( r1 - roughness ) * ( v4 - v1 ) / ( r1 - r4 ) + v1;\n\n\t\t\t\t} else if ( roughness >= r5 ) {\n\n\t\t\t\t\tvariance = ( r4 - roughness ) * ( v5 - v4 ) / ( r4 - r5 ) + v4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfloat roughness2 = roughness * roughness;\n\n\t\t\t\t\tvariance = 1.79 * roughness2 * roughness2;\n\n\t\t\t\t}\n\n\t\t\t\treturn variance;\n\n\t\t\t}\n\n\t\t\tfloat varianceToRoughness( float variance ) {\n\n\t\t\t\tfloat roughness = 0.0;\n\n\t\t\t\tif ( variance >= v1 ) {\n\n\t\t\t\t\troughness = ( v0 - variance ) * ( r1 - r0 ) / ( v0 - v1 ) + r0;\n\n\t\t\t\t} else if ( variance >= v4 ) {\n\n\t\t\t\t\troughness = ( v1 - variance ) * ( r4 - r1 ) / ( v1 - v4 ) + r1;\n\n\t\t\t\t} else if ( variance >= v5 ) {\n\n\t\t\t\t\troughness = ( v4 - variance ) * ( r5 - r4 ) / ( v4 - v5 ) + r4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\troughness = pow( 0.559 * variance, 0.25 ); // 0.559 = 1.0 / 1.79\n\n\t\t\t\t}\n\n\t\t\t\treturn roughness;\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = texture2D( roughnessMap, vUv, - 1.0 );\n\n\t\t\t\tif ( texelSize.x == 0.0 ) return;\n\n\t\t\t\tfloat roughness = gl_FragColor.g;\n\n\t\t\t\tfloat variance = roughnessToVariance( roughness );\n\n\t\t\t\tvec3 avgNormal;\n\n\t\t\t\tfor ( float x = - 1.0; x < 2.0; x += 2.0 ) {\n\n\t\t\t\t\tfor ( float y = - 1.0; y < 2.0; y += 2.0 ) {\n\n\t\t\t\t\t\tvec2 uv = vUv + vec2( x, y ) * 0.25 * texelSize;\n\n\t\t\t\t\t\tavgNormal += normalize( texture2D( normalMap, uv, - 1.0 ).xyz - 0.5 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvariance += 1.0 - 0.25 * length( avgNormal );\n\n\t\t\t\tgl_FragColor.g = varianceToRoughness( variance );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n\tshaderMaterial.type = 'RoughnessMipmapper';\n\n\treturn shaderMaterial;\n\n}\n\nexport { RoughnessMipmapper };\n","import * as THREE from \"three\";\n\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\nimport { RGBELoader } from \"three/examples/jsm/loaders/RGBELoader.js\";\nimport { RoughnessMipmapper } from \"three/examples/jsm/utils/RoughnessMipmapper.js\";\nimport { ThreeLib } from \"@root/lib/modules/three/ThreeLib\";\nimport Component from \"@root/lib/modules/core/ecs/Component\";\nimport { WebpackLazyModule } from \"@root/lib/modules/core/loader/WebpackLoader\";\nimport {\n  LazyServices,\n  Service,\n} from \"@root/lib/modules/core/service/LazyServices\";\n\nexport class Factory implements WebpackLazyModule, Service<GLTFScene> {\n  async create(services: LazyServices): Promise<GLTFScene> {\n    let three = await services.getService<ThreeLib>(\n      \"@root/lib/modules/three/ThreeLib\"\n    );\n    let module = new GLTFScene(three);\n    return module;\n  }\n}\n\nexport class GLTFScene implements Component {\n  constructor(three: ThreeLib) {\n    new RGBELoader()\n      .setPath(\"assets/static/demo/\")\n      .load(\"royal_esplanade_1k.hdr\", function (texture) {\n        texture.mapping = THREE.EquirectangularReflectionMapping;\n        three.scene.background = texture;\n        three.scene.environment = texture;\n        // model\n        // use of RoughnessMipmapper is optional\n        const roughnessMipmapper = new RoughnessMipmapper(three.renderer);\n        const loader = new GLTFLoader().setPath(\"assets/static/demo/\");\n        loader.load(\"DamagedHelmet.gltf\", function (gltf) {\n          gltf.scene.traverse(function (child: any) {\n            if (child.isMesh) {\n              roughnessMipmapper.generateMipmaps(child.material);\n            }\n          });\n          three.scene.add(gltf.scene);\n          roughnessMipmapper.dispose();\n        });\n      });\n  }\n\n  getType(): string {\n    return GLTFScene.name;\n  }\n}\n"],"names":["RGBELoader","DataTextureLoader","constructor","manager","super","this","type","HalfFloatType","parse","buffer","rgbe_error","rgbe_error_code","msg","console","error","fgets","lineLimit","consume","p","pos","i","len","s","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","length","slice","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","e","scale","Math","pow","RGBEByteToRGBHalf","DataUtils","min","byteArray","Uint8Array","rgbe_header_info","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","exposure","width","height","line","match","charAt","parseFloat","parseInt","RGBE_ReadHeader","w","h","image_rgba_data","scanline_width","data_rgba","offset","ptr_end","rgbeStart","scanline_buffer","num_scanlines","count","ptr","isEncodedRun","byteValue","set","l","off","RGBE_ReadPixels_RLE","data","numElements","UnsignedByteType","RGBEFormat","FloatType","floatArray","Float32Array","j","RGBFormat","halfArray","setDataType","value","load","url","onLoad","onProgress","onError","texture","texData","encoding","RGBEEncoding","minFilter","NearestFilter","magFilter","generateMipmaps","flipY","LinearEncoding","LinearFilter","_mipmapMaterial","shaderMaterial","RawShaderMaterial","uniforms","roughnessMap","normalMap","texelSize","Vector2","vertexShader","fragmentShader","blending","NoBlending","depthTest","depthWrite","_getMipmapMaterial","_mesh","Mesh","PlaneGeometry","_flatCamera","OrthographicCamera","_tempTarget","_renderer","RoughnessMipmapper","renderer","compile","material","userData","roughnessUpdated","max","image","MathUtils","oldTarget","getRenderTarget","autoClear","dispose","WebGLRenderTarget","depthBuffer","scissorTest","params","wrapS","wrapT","newRoughnessTarget","setRenderTarget","metalnessMap","aoMap","copy","repeat","center","rotation","matrixAutoUpdate","matrix","position","mip","viewport","x","y","scissor","render","copyFramebufferToTexture","geometry","Factory","services","three","getService","GLTFScene","setPath","mapping","THREE","scene","background","environment","roughnessMipmapper","GLTFLoader","gltf","traverse","child","isMesh","add","getType","name"],"sourceRoot":""}