export declare class PhysicsSystem {
    private ammoWorker;
    private workerHelpers;
    private bodyHelpers;
    private shapeHelpers;
    private bodyUuids;
    private indexToUuid;
    private bodyUuidToData;
    private stepDuration;
    private ready;
    private nextBodyUuid;
    private nextShapeUuid;
    private objectMatricesFloatArray;
    private objectMatricesIntArray;
    constructor();
    tick: () => void;
    addBody(object3D: any, options: any): number;
    updateBody(uuid: any, options: any): void;
    removeBody(uuid: any): void;
    addShapes(bodyUuid: any, mesh: any, options: any): number;
    removeShapes(bodyUuid: any, shapesUuid: any): void;
    addConstraint(constraintId: any, bodyUuid: any, targetUuid: any, options: any): void;
    removeConstraint(constraintId: any): void;
    registerBodyHelper(bodyHelper: any): void;
    registerShapeHelper(shapeHelper: any): void;
    bodyInitialized(uuid: any): boolean;
    getLinearVelocity(uuid: any): any;
    getAngularVelocity(uuid: any): any;
    getCollisions(uuid: any): any;
    resetDynamicBody(uuid: any): void;
    activateBody(uuid: any): void;
}
