{"version":3,"file":"237.index.js","mappings":";;;;;;;;;;;8VAaO,MAAMA,EACXC,eAEY,aAACC,GACX,IAAIC,QAAqBD,EAASE,WAChC,uCAEEC,QAA2BF,EAC5BG,iBACAC,wBAAuCC,EAAAA,EAAAA,MACtCC,QAAmBJ,EAAmBD,WACxC,mDAEEM,QAAkBR,EAASE,WAC7B,+BAEEO,QAAcT,EAASE,WACzB,oCAEF,OAAO,IAAIQ,EACTT,EACAO,EACAC,EACAF,EAAWI,UAKjB,IAAIC,EAAS,GAEN,MAAMF,EACXX,YACUC,EACRQ,EACQC,EACRE,GACA,WAWE,GAXF,sBAmEkC,IAnElC,4BAoEmC,IApEnC,KAJQX,SAAAA,EAIR,KAFQS,MAAAA,EAGRI,KAAKC,mBAAmBH,EAASX,EAASI,kBAC1CI,EAAUO,QAAQL,EAAeM,MAAOC,IACtC,IAAK,MAAMC,KAAQL,KAAKM,aACtBD,EAAKD,MAGTJ,KAAKJ,MAAMW,cAAcC,MAAK,KAC5BR,KAAKS,YAITA,SACE,IAAIC,EAAKV,KAAKJ,MAAMe,SAASC,aAE7BZ,KAAKJ,MAAMe,SAASE,OAAM,GAAM,GAAM,GAEtCb,KAAKJ,MAAMe,SAASG,WAAY,EAEhC,IAAK,MAAMT,KAAQL,KAAKe,mBACtBV,IAGFK,EAAGM,WAAU,GAAM,GAAM,GAAM,GAC/BN,EAAGO,WAAU,GAGfC,UACE,OAAOrB,EAAeM,KAGxBF,mBAAmBkB,EAAaC,GACzBrB,EAAOoB,KACVpB,EAAOoB,GAAOC,GAIF,iBAACD,GAEf,IAAIE,EAAsB,IAAIC,EAAAA,EAE9B,GADAH,EAAME,EAAoBE,eAAeJ,GACrCpB,EAAOoB,GACT,OAAOpB,EAAOoB,GAEhB,IAAIC,EAAQ,IAAII,EAAAA,EAChBzB,EAAOoB,GAAOC,EAEd,IAAIK,EAAgB,IAAIhC,EAAAA,EACxB2B,EAAMM,aAAaD,GACnBA,EAAcE,WACZ,kDACAN,GAEF,IAAIO,QAAaP,EAAoBQ,uBAAuBV,GAC5D,aAAa,IAAIW,SAAQ,CAACC,EAASC,KACjCX,EACGY,aAAab,EAAOQ,EAAKM,UAAU,CAACC,EAAUC,KAC7CC,QAAQC,IAAI,IAAMnB,EAAM,QAAUgB,EAAW,IAAMC,EAAQ,QAE5DG,MAAK,KACJF,QAAQC,IAAI,IAAMnB,EAAM,UACxBY,EAAQX,MAEToB,MAAMR,MAObS,cAAcC,GACZ1C,KAAKM,aAAaE,KAAKkC,GAGzBC,oBAAoBD,GAClB1C,KAAKe,mBAAmBP,KAAKkC","sources":["webpack://axolotis-player/./src/lib/modules/portals/PortalsService.ts"],"sourcesContent":["import { WebpackLazyModule } from \"@root/lib/modules/core/loader/WebpackLoader\";\nimport {\n  LazyServices,\n  Service,\n} from \"@root/lib/modules/core/service/LazyServices\";\nimport Component from \"@root/lib/modules/core/ecs/Component\";\nimport { ServiceEntity } from \"@root/lib/modules/core/service/ServiceEntity\";\nimport { WorldEntity } from \"@root/lib/modules/core/ecs/WorldEntity\";\nimport { CodeLoaderComponent } from \"@root/lib/modules/core/loader/CodeLoaderComponent\";\nimport { WorldService } from \"@root/lib/modules/core/WorldService\";\nimport { FrameLoop } from \"@root/lib/modules/FrameLoop\";\nimport { ThreeLib } from \"@root/lib/modules/three/ThreeLib\";\n\nexport class Factory implements WebpackLazyModule, Service<PortalsService> {\n  constructor() {}\n\n  async create(services: LazyServices): Promise<PortalsService> {\n    let worldService = await services.getService<WorldService>(\n      \"@root/lib/modules/core/WorldService\"\n    );\n    let actualWorldService = await worldService\n      .getActiveWorld()\n      .getFirstComponentByType<ServiceEntity>(ServiceEntity.name);\n    let codeLoader = await actualWorldService.getService<CodeLoaderComponent>(\n      \"@root/lib/modules/core/loader/CodeLoaderService\"\n    );\n    let frameLoop = await services.getService<FrameLoop>(\n      \"@root/lib/modules/FrameLoop\"\n    );\n    let three = await services.getService<ThreeLib>(\n      \"@root/lib/modules/three/ThreeLib\"\n    );\n    return new PortalsService(\n      worldService,\n      frameLoop,\n      three,\n      codeLoader.roomUrl\n    );\n  }\n}\n\nlet worlds = {};\n\nexport class PortalsService implements Component {\n  constructor(\n    private services: WorldService,\n    frameLoop: FrameLoop,\n    private three: ThreeLib,\n    roomUrl: string\n  ) {\n    this.notifyInitialWorld(roomUrl, services.getActiveWorld());\n    frameLoop.addLoop(PortalsService.name, (delta) => {\n      for (const loop of this.portalsLoops) {\n        loop(delta);\n      }\n    });\n    this.three.preRenderPass.push(() => {\n      this.render();\n    });\n  }\n  i = 0;\n  render() {\n    let gl = this.three.renderer.getContext();\n    // clear buffers now: color, depth, stencil\n    this.three.renderer.clear(true, true, true);\n    // do not clear buffers before each render pass\n    this.three.renderer.autoClear = false;\n\n    for (const loop of this.portalsRenderLoops) {\n      loop();\n    }\n\n    gl.colorMask(true, true, true, true);\n    gl.depthMask(true);\n  }\n\n  getType(): string {\n    return PortalsService.name;\n  }\n\n  notifyInitialWorld(url: string, world: WorldEntity) {\n    if (!worlds[url]) {\n      worlds[url] = world;\n    }\n  }\n\n  async loadNewUrl(url: string): Promise<WorldEntity> {\n    //\"assets/static/demo3/room2.json\"\n    let codeLoaderComponent = new CodeLoaderComponent();\n    url = codeLoaderComponent.cleanUpRoomUrl(url);\n    if (worlds[url]) {\n      return worlds[url];\n    }\n    let world = new WorldEntity();\n    worlds[url] = world; //wait url cleaning\n\n    let serviceEntity = new ServiceEntity();\n    world.addComponent(serviceEntity);\n    serviceEntity.setService(\n      \"@root/lib/modules/core/loader/CodeLoaderService\",\n      codeLoaderComponent\n    );\n    let json = await codeLoaderComponent.loadRoomDefinitionFile(url);\n    return await new Promise((resolve, reject) => {\n      codeLoaderComponent\n        .startLoading(world, json.entities, (progress, total) => {\n          console.log(\"[\" + url + \"] : [\" + progress + \"/\" + total + \"]\");\n        })\n        .then(() => {\n          console.log(\"[\" + url + \"] : ok\");\n          resolve(world);\n        })\n        .catch(reject);\n    });\n  }\n\n  portalsLoops: ((delta) => void)[] = [];\n  portalsRenderLoops: (() => void)[] = [];\n\n  addPortalLoop(callback: (delta) => void) {\n    this.portalsLoops.push(callback);\n  }\n\n  addPortalRenderLoop(callback: () => void) {\n    this.portalsRenderLoops.push(callback);\n  }\n}\n"],"names":["Factory","constructor","services","worldService","getService","actualWorldService","getActiveWorld","getFirstComponentByType","ServiceEntity","codeLoader","frameLoop","three","PortalsService","roomUrl","worlds","this","notifyInitialWorld","addLoop","name","delta","loop","portalsLoops","preRenderPass","push","render","gl","renderer","getContext","clear","autoClear","portalsRenderLoops","colorMask","depthMask","getType","url","world","codeLoaderComponent","CodeLoaderComponent","cleanUpRoomUrl","WorldEntity","serviceEntity","addComponent","setService","json","loadRoomDefinitionFile","Promise","resolve","reject","startLoading","entities","progress","total","console","log","then","catch","addPortalLoop","callback","addPortalRenderLoop"],"sourceRoot":""}